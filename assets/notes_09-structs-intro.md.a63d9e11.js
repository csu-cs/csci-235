import{_ as l,o as p,c as e,k as s,a as n,Q as a}from"./chunks/framework.eb542efc.js";const o="/csci-235/assets/struct-declaration.bda6182a.svg",t="/csci-235/assets/struct-init.a0ab416a.svg",q=JSON.parse('{"title":"Introduction to Records (structs)","description":"","frontmatter":{},"headers":[],"relativePath":"notes/09-structs-intro.md","filePath":"notes/09-structs-intro.md","lastUpdated":1672375659000}'),r={name:"notes/09-structs-intro.md"},c=s("h1",{id:"introduction-to-records-structs",tabindex:"-1"},[n("Introduction to Records (structs) "),s("a",{class:"header-anchor",href:"#introduction-to-records-structs","aria-label":'Permalink to "Introduction to Records (structs)"'},"​")],-1),i=s("p",null,[s("em",null,"Chapter 9")],-1),y=s("p",null,[n("A "),s("code",null,"struct"),n(" is a "),s("em",null,"data type"),n(" that is a collection of a fixed number of components (called members), that are accessed by name.")],-1),E=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/7kzQwPa5s2k?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),u=a(`<ul><li><p>The <em>members</em> of a <code>struct</code> may be of different types.</p></li><li><p>The syntax for defining a struct:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StructName</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataType1 identifier1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataType2 identifier2;</span></span>
<span class="line"><span style="color:#E1E4E8;">    …</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataTypeN identiferN;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span><span style="color:#6A737D;"> //&lt;- ends in a semicolon</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StructName</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    dataType1 identifier1;</span></span>
<span class="line"><span style="color:#24292E;">    dataType2 identifier2;</span></span>
<span class="line"><span style="color:#24292E;">    …</span></span>
<span class="line"><span style="color:#24292E;">    dataTypeN identiferN;</span></span>
<span class="line"><span style="color:#24292E;">};</span><span style="color:#6A737D;"> //&lt;- ends in a semicolon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p>A <code>struct</code> is a definition of a new data type, not a variable declaration. One must declare a variable of that type to use it. Remember, a <em>data type</em> is a set of possible values that can be stored in a variable with the matching type.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Defining a new type called &quot;Movie&quot; that holds metadata of a movie.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Movie</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    string title;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> year;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string storyline;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string genre;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> rating;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> reviewCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> isFavorite;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Defining a new type called &quot;Movie&quot; that holds metadata of a movie.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Movie</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    string title;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> year;</span></span>
<span class="line"><span style="color:#24292E;">    string storyline;</span></span>
<span class="line"><span style="color:#24292E;">    string genre;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> rating;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> reviewCount;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> isFavorite;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Just like we can create an integer variable with <code class="cpp">int value;</code>, variables of our <code>struct</code> types can be declared (e.g., <code class="cpp">Move favMove;</code>).</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Movie favMove;</span><span style="color:#6A737D;"> // example of declaring a variable with our movie type</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Movie favMove;</span><span style="color:#6A737D;"> // example of declaring a variable with our movie type</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><figure><img src="`+o+`" alt="The variable favMovie after declaration. Move favMove;" id="fig:dec"><figcaption>The variable <code>favMovie</code> after declaration. <code>Move favMove;</code></figcaption></figure><p>A <code>struct</code> type must be defined before it can be used. Normally, we put the <code>struct</code>s above the main and function prototypes. This is okay because we are defining a type, not a variable.</p><h2 id="accessing-struct-members" tabindex="-1">Accessing <code>struct</code> Members <a class="header-anchor" href="#accessing-struct-members" aria-label="Permalink to &quot;Accessing \`struct\` Members&quot;">​</a></h2><p>Syntax to access a <code>struct</code> member: <code>structVariableName.memberName</code></p><p>The dot (<code>.</code>) is called the <em>member-access operator</em>.</p><p>To initialize the members of <code>favMovie</code>:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Initialize some of the members of this Movie variable.</span></span>
<span class="line"><span style="color:#E1E4E8;">favMovie.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Toy Story 3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">favMovie.year </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2010</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">favMovie.isFavorite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Display the movie&#39;s title</span></span>
<span class="line"><span style="color:#E1E4E8;">cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.title </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span><span style="color:#6A737D;"> // &quot;Toy Story 3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Initialize some of the members of this Movie variable.</span></span>
<span class="line"><span style="color:#24292E;">favMovie.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Toy Story 3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">favMovie.year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2010</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">favMovie.isFavorite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Display the movie&#39;s title</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.title </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span><span style="color:#6A737D;"> // &quot;Toy Story 3&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><figure><img src="`+t+`" alt="The variable favMovie after initializing some of its members." id="fig:init"><figcaption>The variable <code>favMovie</code> after initializing some of its members.</figcaption></figure><h2 id="assignment" tabindex="-1">Assignment <a class="header-anchor" href="#assignment" aria-label="Permalink to &quot;Assignment&quot;">​</a></h2><ul><li><p>The value of one <code>struct</code> variable can be assigned to another <code>struct</code> variable of the same type using an assignment statement (an aggrieve operation).</p></li><li><p>The following statement copies the contents of <code>favMovie</code> to <code>oldFavMovie</code> (both are <code>Movie</code> variables as defined above).</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">oldFavMovie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">oldFavMovie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>It is equivalent to:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">oldFavMovie.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.title;</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie.year </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.year;</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie.storyline </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.storyline;</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie.genre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.genre;</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie.rating </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.rating;</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie.reviewCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.reviewCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie.isFavorite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> favMovie.isFavorite;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">oldFavMovie.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.title;</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie.year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.year;</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie.storyline </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.storyline;</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie.genre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.genre;</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie.rating </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.rating;</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie.reviewCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.reviewCount;</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie.isFavorite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> favMovie.isFavorite;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p>The values of <code>oldFavMovie</code> are copied to <code>favMovie</code>, so any future changes to members of <code>oldFavMovie</code>, will NOT be reflected in <code>favMovie</code>.</p><ul><li><p>You can also assign values to <code>struct</code>s using an ordered list in <code>{}</code></p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Set the values of the oldFavMovie in order (title, year, …, isFavorite).</span></span>
<span class="line"><span style="color:#E1E4E8;">oldFavMovie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;Moana&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2016</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Ocean leads girl on journey&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;animation&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">7.6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">264776</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Set the values of the oldFavMovie in order (title, year, …, isFavorite).</span></span>
<span class="line"><span style="color:#24292E;">oldFavMovie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;Moana&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Ocean leads girl on journey&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;animation&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">7.6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">264776</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Design Note</strong>: This type of aggregate initialization may introduce bugs if you add new members to your <code>struct</code> type.</p></li></ul><h2 id="comparison-using-relational-operators" tabindex="-1">Comparison (using Relational Operators) <a class="header-anchor" href="#comparison-using-relational-operators" aria-label="Permalink to &quot;Comparison (using Relational Operators)&quot;">​</a></h2><ul><li><p>Two <code>struct</code> variables must be compared member-wise. <strong>No</strong> aggregate relational operations are given.</p></li><li><p>To compare the values of <code>movie1</code> and <code>movie2</code>:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (movie1.title </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> movie2.title </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> movie2.year </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> movie2.year </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> …)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (movie1.title </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> movie2.title </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> movie2.year </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> movie2.year </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> …)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="input-and-output" tabindex="-1">Input and Output <a class="header-anchor" href="#input-and-output" aria-label="Permalink to &quot;Input and Output&quot;">​</a></h2><ul><li><p>No aggregate input/output operations on a <code>struct</code> variable</p></li><li><p>Data in a <code>struct</code> variable must be read or written one member at a time</p></li><li><p>Example: output <code>favMovie</code> contents</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Title: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.title </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#6A737D;"> // Toy Story 3</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Year: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.year </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#6A737D;">    // 2010</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Storyline: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.storyline </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Genre: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.genre </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Rating: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.rating </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Review Count: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> favMovie.reviewCount </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Favorite: $&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> (favMovie.isFavorite </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;yes&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;no&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span><span style="color:#6A737D;"> // yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Title: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.title </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#6A737D;"> // Toy Story 3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Year: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.year </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#6A737D;">    // 2010</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Storyline: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.storyline </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Genre: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.genre </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Rating: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.rating </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Review Count: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> favMovie.reviewCount </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Favorite: $&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> (favMovie.isFavorite </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;yes&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;no&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span><span style="color:#6A737D;"> // yes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="structs-as-function-parameters-and-return-values" tabindex="-1">Structs as Function Parameters and Return Values <a class="header-anchor" href="#structs-as-function-parameters-and-return-values" aria-label="Permalink to &quot;Structs as Function Parameters and Return Values&quot;">​</a></h2>`,22),d=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/4XDMmwvOWxM?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),b=a(`<details class="details custom-block"><summary>Try the following code from the video.</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * Introduction to records. Creating our own structured data types!</span></span>
<span class="line"><span style="color:#6A737D;"> * by Dr. Hayes</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iomanip&gt;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A data type representing a student&#39;s info.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	string firstName;</span></span>
<span class="line"><span style="color:#E1E4E8;">	string lastName;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> gpa;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Display the information about the student.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">stud</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Get a student&#39;s info from the user.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Student</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">stud</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Get a student&#39;s info from the user.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	Student stud1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;James&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Kirk&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.5</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	Student stud2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	stud1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">(stud2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stud1.firstName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> stud2.firstName</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> stud1.lastName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> stud2.lastName </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> stud1.gpa </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> stud2.gpa)</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">		cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;The two students are the same.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setprecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> fixed;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(stud1);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(stud2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">stud</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> stud.firstName </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> stud.lastName </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; has a GPA of &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> stud.gpa </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Student</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">stud</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Enter your first name: &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	cin </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> stud.firstName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Enter your last name: &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	cin </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> stud.lastName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Enter your current GPA: &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	cin </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> stud.gpa;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	Student stud;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">getStudent</span><span style="color:#E1E4E8;">(stud);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> stud;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * Introduction to records. Creating our own structured data types!</span></span>
<span class="line"><span style="color:#6A737D;"> * by Dr. Hayes</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iomanip&gt;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A data type representing a student&#39;s info.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	string firstName;</span></span>
<span class="line"><span style="color:#24292E;">	string lastName;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> gpa;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Display the information about the student.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">stud</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Get a student&#39;s info from the user.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Student</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">stud</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Get a student&#39;s info from the user.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	Student stud1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;James&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Kirk&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.5</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	Student stud2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	stud1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">(stud2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stud1.firstName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> stud2.firstName</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> stud1.lastName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> stud2.lastName </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> stud1.gpa </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> stud2.gpa)</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;The two students are the same.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setprecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> fixed;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(stud1);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(stud2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">stud</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> stud.firstName </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> stud.lastName </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; has a GPA of &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> stud.gpa </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Student</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">stud</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Enter your first name: &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> stud.firstName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Enter your last name: &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> stud.lastName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Enter your current GPA: &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> stud.gpa;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	Student stud;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">getStudent</span><span style="color:#24292E;">(stud);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> stud;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div></details><h2 id="arrays-versus-structs" tabindex="-1">Arrays versus <code>struct</code>s <a class="header-anchor" href="#arrays-versus-structs" aria-label="Permalink to &quot;Arrays versus \`struct\`s&quot;">​</a></h2><p>Table: A comparison of the operations that may be performed on arrays and <code>struct</code>s.</p><table><thead><tr><th style="text-align:right;"><strong>Aggregate Operation</strong></th><th style="text-align:center;"><strong>Array</strong></th><th style="text-align:center;"><code>struct</code></th></tr></thead><tbody><tr><td style="text-align:right;">Arithmetic</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:right;">List Initialization</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:right;">Assignment</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:right;">Input / Output</td><td style="text-align:center;">*Strings only</td><td style="text-align:center;"></td></tr><tr><td style="text-align:right;">Comparison</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:right;">Parameter Passing</td><td style="text-align:center;">*By Reference Only</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:right;">Function Returning a Value</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr></tbody></table><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><ul><li><code>struct</code>: a collection of a fixed number of components (called members) that are accessed by name.</li><li>Components can be of different types.</li><li><code>struct</code> is a reserved word.</li><li>No memory is allocated for a <code>struct</code> type. A memory location is reserved when a variable is declared.</li><li>The dot operator (<code>.</code>) is the member-access operator <ul><li>Used to access members of a <code>struct</code></li></ul></li><li>The only built-in operations on a <code>struct</code> are the assignment and member access</li><li>Neither arithmetic nor relational operations are allowed on <code>struct</code>s</li><li>A <code>struct</code> can be passed by value or reference</li><li>A function can return a value of type <code>struct</code></li></ul>`,6),m=[c,i,y,E,u,d,b];function v(F,g,h,f,A,D){return p(),e("div",null,m)}const M=l(r,[["render",v]]);export{q as __pageData,M as default};
