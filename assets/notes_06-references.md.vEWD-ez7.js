import{_ as e,o as i,c as n,R as s,k as a}from"./chunks/framework.FOt1pWjv.js";const y=JSON.parse('{"title":"Reference Parameters","description":"","frontmatter":{},"headers":[],"relativePath":"notes/06-references.md","filePath":"notes/06-references.md","lastUpdated":1702474223000}'),t={name:"notes/06-references.md"},l=s(`<h1 id="reference-parameters" tabindex="-1">Reference Parameters <a class="header-anchor" href="#reference-parameters" aria-label="Permalink to &quot;Reference Parameters&quot;">​</a></h1><p><em>Chapter 6</em></p><h2 id="variable-aliases" tabindex="-1">Variable Aliases <a class="header-anchor" href="#variable-aliases" aria-label="Permalink to &quot;Variable Aliases&quot;">​</a></h2><p>The <code>&amp;</code> can be used to create a new name (i.e., alias or reference) for an existing variable. For example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // alias to num</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // a copy of num</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // outputs 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // outputs 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // outputs 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // changes num to 5, because ref is just another name for num</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // outputs 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // outputs 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // outputs 5, because it is a copy of the original</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>We use <code>&amp;</code> not only for variables but also for function parameters. One benefit of reference parameters is that they allow us to modify the original variable in the calling function.</p><h2 id="two-types-of-function-parameters" tabindex="-1">Two Types of Function Parameters <a class="header-anchor" href="#two-types-of-function-parameters" aria-label="Permalink to &quot;Two Types of Function Parameters&quot;">​</a></h2><p>There are two ways to send information to a function using parameters: <em>Pass-by-Value</em> and <em>Pass-by-Reference</em>.</p>`,8),r=a("div",{class:"youtube"},[a("div",null,[a("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/x9W1qV-RO5k?rel=0&showinfo=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),p=s('<ol><li><p><strong>Value parameter:</strong> a formal parameter that receives a copy of the content of the corresponding actual parameter</p><ul><li>The formal parameter has its own copy of the data.</li><li>During execution, the function manipulates the data stored in its own memory space.</li><li>The copy is lost when the function call ends.</li></ul></li><li><p><strong>Reference parameter</strong>: a formal parameter that receives the location (memory address) of the corresponding actual parameter</p><ul><li>Changes to the formal parameter will change the corresponding actual parameter. <ul><li>i.e., the changes are occurring directly on the variable passed in (not a copy).</li></ul></li><li>Reference parameters are useful in three situations: <ol><li>When returning more than one value.</li><li>When changing the actual parameter.</li><li>When passing the address saves memory space and time (use a <code>const</code> reference if you are not changing the actual parameter.)</li></ol></li></ul></li></ol><h2 id="memory-allocation-for-parameters" tabindex="-1">Memory Allocation for Parameters <a class="header-anchor" href="#memory-allocation-for-parameters" aria-label="Permalink to &quot;Memory Allocation for Parameters&quot;">​</a></h2><ul><li><p>When a function is called, memory for its formal parameters and its local variables is allocated in the function data area.</p></li><li><p><strong>For a value parameter</strong>, the actual parameter’s value is copied into the formal parameter’s memory cell.</p><ul><li>Changes to the formal parameter do not affect the actual parameter’s value.</li></ul></li><li><p><strong>For a reference parameter</strong>, the actual parameter’s address passes to the formal parameter.</p><ul><li>Both formal and actual parameters refer to the same memory location</li><li>During execution, changes made to the formal parameter’s value permanently change the actual parameter’s value.</li></ul></li><li><p>Design Guideline: If a function needs to return more than one value, do not use a value-returning function. Instead, use reference parameters to “return” the values.</p></li></ul>',3),h=[l,r,p];function o(k,c,d,u,m,E){return i(),n("div",null,h)}const f=e(t,[["render",o]]);export{y as __pageData,f as default};
