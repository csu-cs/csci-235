import{_ as e,c as n,o as t,ag as i,j as s}from"./chunks/framework.D-HyXncD.js";const u=JSON.parse('{"title":"File Input and Output","description":"","frontmatter":{},"headers":[],"relativePath":"notes/03-files.md","filePath":"notes/03-files.md","lastUpdated":1702474223000}'),l={name:"notes/03-files.md"};function p(r,a,h,o,d,k){return t(),n("div",null,[...a[0]||(a[0]=[i('<h1 id="file-input-and-output" tabindex="-1">File Input and Output <a class="header-anchor" href="#file-input-and-output" aria-label="Permalink to &quot;File Input and Output&quot;">​</a></h1><p><em>Chapter 3</em></p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>A <em>file</em> is an area in secondary storage to hold info.</p><p>We use streams that are similar to <code>cin</code> and count with files, except they are <code>fstream</code> variables that we define.</p><p>File I/O is a five-step process:</p><ol><li>Include the <code>fstream</code> header.</li><li>Declare file stream variables (of time <code>ifstream</code> for input and <code>ofstream</code> for output).</li><li>Associate the file stream variables with the input/output sources.</li><li>Use the file stream variables with <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, or other input/output functions.</li><li>Close the file stream (don’t forget this step).</li></ol><p>Creating Files</p>',8),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/MMp4zV05R5k?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),s("p",null,"Reading from Files",-1),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/QnCVoYnLIg8?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),i(`<h2 id="example-reading-and-writing" tabindex="-1">Example: Reading and Writing <a class="header-anchor" href="#example-reading-and-writing" aria-label="Permalink to &quot;Example: Reading and Writing&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;fstream&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // the preprocessor directive for using files</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Declare variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Declare that you will use a file stream.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ifstream inData;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // input file stream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ofstream outData;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // output file stream</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Read in values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // opens data for reading</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPA;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // gets the data out of text.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Write values to new file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // creates a new file for output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalGrade;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // put the data into out.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="common-errors" tabindex="-1">Common Errors <a class="header-anchor" href="#common-errors" aria-label="Permalink to &quot;Common Errors&quot;">​</a></h2><ul><li>Forgot to open your file. It will still compile and run, but give you erroneous results.</li><li>Tried to read input from a file that does not exist. Make sure the file is in the correct directly and that your code didn’t misspell the name.</li><li>If you specify a directory (folder) location in conjunction with your filename (e.g., <code>&quot;C:\\\\my stuff\\\\data.txt&quot;</code>), use forward slashes or escape your backslashes (e.g., <code>&quot;c:/my stuff/data.txt&quot;</code> or <code>&quot;c:\\\\my stuff\\\\data.txt&quot;</code>).</li><li>Avoid using absolute paths, which are paths that refer to the file location from the root of the drive rather than a path relative to the program’s location.</li></ul><h2 id="self-check-questions" tabindex="-1">Self-Check Questions <a class="header-anchor" href="#self-check-questions" aria-label="Permalink to &quot;Self-Check Questions&quot;">​</a></h2><ol><li>Name the five steps for reading from a file.</li><li>Name the five steps for writing to a file.</li><li>If you are opening a file and it is not there, what happens?</li><li>If you are writing to a file that doesn’t exist yet, what happens?</li></ol>`,6)])])}const E=e(l,[["render",p]]);export{u as __pageData,E as default};
