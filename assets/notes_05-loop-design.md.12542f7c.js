import{_ as e,o as a,c as l,S as n,k as s}from"./chunks/framework.dd599f9c.js";const w=JSON.parse('{"title":"Loop Design with While Loops","description":"","frontmatter":{},"headers":[],"relativePath":"notes/05-loop-design.md","filePath":"notes/05-loop-design.md","lastUpdated":1672115243000}'),o={name:"notes/05-loop-design.md"},p=n('<h1 id="loop-design-with-while-loops" tabindex="-1">Loop Design with While Loops <a class="header-anchor" href="#loop-design-with-while-loops" aria-label="Permalink to &quot;Loop Design with While Loops&quot;">​</a></h1><p><em>Chapter 5</em></p><h2 id="why-is-repetition-needed" tabindex="-1">Why Is Repetition Needed? <a class="header-anchor" href="#why-is-repetition-needed" aria-label="Permalink to &quot;Why Is Repetition Needed?&quot;">​</a></h2><ul><li>Repetition allows efficient use of variables.</li><li>We can input, add, and average multiple numbers using a limited number of variables and lines of code.</li><li>For example, to add five numbers: <ul><li>Declare a variable for each number, input the numbers and add the variables together.</li><li>Create a loop that reads a number into a variable and adds it to a variable that contains the sum of the numbers.</li></ul></li></ul><h2 id="while-loops" tabindex="-1">While Loops <a class="header-anchor" href="#while-loops" aria-label="Permalink to &quot;While Loops&quot;">​</a></h2>',5),t=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/rsSWJpoAADM?showinfo=0;rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),r=n(`<p>Note: One example in this video is summing the numbers from 1 to 10, in which the program outputs the result of 45. However, the actual sum of the numbers from 1 to 10 is 55! See if you can find the bug in the example code.</p><ul><li><p>The syntax of the while statement is very similar to the <code>if</code> statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    statement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>The <em>expression</em> acts as a decision-maker and is evaluated as a logical expression.</p></li><li><p>The <em>statement</em> can be simple or compound (i.e., multiple statements surrounded by <code>{}</code>).</p></li><li><p>The <em>statement</em> is called the body of the loop.</p></li><li><p>The parentheses are part of the syntax.</p></li></ul><p>There are a few ways to use a <code>while</code> loop, which we will discuss below.</p><h2 id="loop-design" tabindex="-1">Loop Design <a class="header-anchor" href="#loop-design" aria-label="Permalink to &quot;Loop Design&quot;">​</a></h2><p>There are counter-, sentinel-, and flag-controlled loops.</p>`,5),i=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/nqU_SJ0bYlk?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),c=n(`<h3 id="counter-controlled-while-loop" tabindex="-1">Counter-Controlled While Loop <a class="header-anchor" href="#counter-controlled-while-loop" aria-label="Permalink to &quot;Counter-Controlled While Loop&quot;">​</a></h3><p>Here is an example where you do stuff 15 times.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // set a counter to 0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">counter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // repeat the while counter is less than 15.</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //  Do stuff here...</span></span>
<span class="line"><span style="color:#F07178;">    counter</span><span style="color:#89DDFF;">++;</span><span style="color:#676E95;font-style:italic;"> // update by one each time the loop iterates</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In this example, <code>counter</code> is called the <em>loop-control variable</em>.</p><p><strong>Common mistakes</strong> that cause infinite loops (loops that continue to execute endlessly):</p><ul><li><p>Make sure to include a statement in the loop body that will eventually make the test condition <code>false</code>.</p><ul><li>Make sure to update your loop-control variable inside the loop, so the loop will exit.</li><li>If you have an infinite loop, press Ctrl+C to exit your program.</li></ul></li><li><p>Make sure you initialize the counter before the <code>while</code> loop or the value may be incorrect.</p></li><li><p>Don’t put a semicolon after the test condition.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">counter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Infinite loop, because of the ; placement</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="sentinel-controlled-while-loop" tabindex="-1">Sentinel-Controlled While Loop <a class="header-anchor" href="#sentinel-controlled-while-loop" aria-label="Permalink to &quot;Sentinel-Controlled While Loop&quot;">​</a></h3><p>A <em>sentinel</em> value is used to determine if the loop should end.</p><p>Usually, this is given to you by the user (from a file).</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Enter numbers to add until you are finished</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, them input -1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // -1 is the sentinel value causing the program to exit.</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    num </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="flag–controlled-while-loop-very-similar-to-sentinel" tabindex="-1">Flag–Controlled While Loop (very similar to sentinel) <a class="header-anchor" href="#flag–controlled-while-loop-very-similar-to-sentinel" aria-label="Permalink to &quot;Flag–Controlled While Loop (very similar to sentinel)&quot;">​</a></h3><p>If you are looking for something and can quit once you find it, you can set a Boolean value to false and when you find what you are looking for, you set the value to true, and the loop exits.</p><p>Here is some sample code:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">done</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // done is the flag variable. (!done is preferred over done == false)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //Do something...;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">found what you wanted to</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        done </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //Do something else...;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="eof-controlled-while-loop" tabindex="-1"><code>EOF</code>-Controlled While Loop <a class="header-anchor" href="#eof-controlled-while-loop" aria-label="Permalink to &quot;\`EOF\`-Controlled While Loop&quot;">​</a></h2>`,15),d=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/VW-Q3ZD_W0w?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),u=n(`<details class="details custom-block"><summary>This is the data file from the video, <code>data.txt</code></summary><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">43	64	28	81	71	57	52	36	72	24</span></span>
<span class="line"><span style="color:#A6ACCD;">76	11	86	89	50	54	63	1	15	71</span></span>
<span class="line"><span style="color:#A6ACCD;">42	88	33	26	99	29	37	97	73	19</span></span>
<span class="line"><span style="color:#A6ACCD;">26	52	49	50	53	76	49	62	26	94</span></span>
<span class="line"><span style="color:#A6ACCD;">1	55	29	98	1	39	6	80	37	4</span></span>
<span class="line"><span style="color:#A6ACCD;">10	39	10	94	49	13	44	36	28	50</span></span>
<span class="line"><span style="color:#A6ACCD;">1	10	84	22	78	87	76	41	15	2</span></span>
<span class="line"><span style="color:#A6ACCD;">54	43	94	45	8	46	24	72	22	82</span></span>
<span class="line"><span style="color:#A6ACCD;">20	55	80	49	73	72	33	45	16	34</span></span>
<span class="line"><span style="color:#A6ACCD;">27	96	41	37	33	66	79	67	82	25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details><p>Often, we want to read a file until we are at the end of a file (<code>EOF</code>). If you are importing from a file, there is a function called <code>eof()</code>, which returns <code>true</code> if you have reached the end of the file, and <code>false</code> otherwise. Alternatively, the input stream variable itself will return <code>true</code> if (1) you are not at end of the file and (2) you do not have an input error.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ifstream inFile</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // declare the input stream variable</span></span>
<span class="line"><span style="color:#A6ACCD;">string word</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // variable to hold input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">inFile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // open the file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">inFile </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> word</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // read first value (if there is a value to read)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inFile</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // make sure the stream is good (no errors, not at EOF).</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    ...</span><span style="color:#676E95;font-style:italic;"> // do something with word.</span></span>
<span class="line"><span style="color:#F07178;">    inFile </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> word</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // update the loop control variable</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">inFile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">// close the file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>If you use <code>eof()</code>, make sure your input file does not have a blank line of space after the last value.</p><h2 id="other-expressions" tabindex="-1">Other Expressions <a class="header-anchor" href="#other-expressions" aria-label="Permalink to &quot;Other Expressions&quot;">​</a></h2><p>The expression in a <code>while</code> statement can be complex. For example,</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">noOfGuesses </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">isGuessed</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    . . .</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,7),y=[p,t,r,i,c,d,u];function h(D,m,b,F,C,f){return a(),l("div",null,y)}const g=e(o,[["render",h]]);export{w as __pageData,g as default};
