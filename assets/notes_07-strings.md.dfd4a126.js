import{_ as m,o as l,c,a as s,b as e,d as t,w as n,e as o,r as a}from"./app.d1aa0a95.js";const P=JSON.parse('{"title":"The string Type","description":"","frontmatter":{},"headers":[{"level":2,"title":"The Array-Subscript Operator","slug":"the-array-subscript-operator","link":"#the-array-subscript-operator","children":[]},{"level":2,"title":"Range-Based Loops","slug":"range-based-loops","link":"#range-based-loops","children":[]},{"level":2,"title":"Additional string Operations","slug":"additional-string-operations","link":"#additional-string-operations","children":[]}],"relativePath":"notes/07-strings.md","lastUpdated":1672369588000}'),y={name:"notes/07-strings.md"},D=o(`<h1 id="the-string-type" tabindex="-1">The <code>string</code> Type <a class="header-anchor" href="#the-string-type" aria-hidden="true">#</a></h1><p><em>Chapter 7</em></p><ul><li><p>To use the data type, <code>string</code>, a program must include the header file <code>string</code>.</p></li><li><p>A <code>string</code> is a sequence of 0 or more characters</p><ul><li>The first character is in position <code>0</code></li><li>The second character is in position <code>1</code>, etc.</li></ul></li><li><p>Binary operator + performs the string concatenation operation</p></li><li><p>The statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">string str1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello There</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>stores the string &quot;Hello There&quot; in <code>str1</code>.</p><ul><li><p>The statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">string str2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>copies the value of <code>str1</code> into <code>str2</code>.</p></li><li><p>If <code>str1 == &quot;Sunny&quot;</code>, the statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> Day</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>stores the string &quot;Sunny Day&quot; into <code>str2</code>.</p></li><li><p>Suppose <code>str1 == &quot;Hello&quot;</code> and <code>str2 == &quot;There&quot;</code>. The statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> str2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>stores &quot;Hello There&quot; into <code>str3</code>. This statement is equivalent to the statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> str2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Also, the statement:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str3 </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, Mickey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>updates the value of <code>str3</code> by appending the <code>string</code> &quot;, Mickey&quot; to its old value. Therefore, the new value of <code>str3</code> is &quot;Hello There, Mickey&quot;.</p></li></ul><h2 id="the-array-subscript-operator" tabindex="-1">The Array-Subscript Operator <a class="header-anchor" href="#the-array-subscript-operator" aria-hidden="true">#</a></h2><p><em>Array-subscript operator</em> <code>[]</code> allows access to an individual character in a <code>string</code>.</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">string str1 = &quot;know&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">str1[0] == &#39;k&#39;; // true</span></span>
<span class="line"><span style="color:#A6ACCD;">str1[3] == &#39;w&#39;; // true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">str1[0] = &#39;s&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">cout &lt;&lt; str1 &lt;&lt; endl; // snow</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>The number inside of the array subscript operator <code>[]</code> is called the <em>index</em> of the character.</p>`,9),g=s("p",null,[e("Because strings can hold more characters that the maximum value of an integer, we will use a new data type as "),s("code",null,"string::size_type"),e(".")],-1),b=o("<li><p><code>string::size_type</code> An <em>unsigned</em> integer (data) type. This is like an <code>int</code> but guaranteed to be big enough to hold a <code>string</code> of any size. (<strong>Very useful for looping over the length of a <code>string</code>!</strong>) <em>Unsigned</em> means it cannot hold negative numbers.</p></li>",1),C=s("code",null,"string::npos",-1),_=s("code",null,"string::size_type",-1),T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},A={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.816ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3012.6 915.9","aria-hidden":"true"},f=o('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(2512.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),F=[f],v=o(`<div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">string::size_type index = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">string str1 = &quot;know&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">str1[index] == &#39;k&#39;; // true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,1),w=o(`<li><p>Example of iterating over each character in a <code>string</code>:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">// Display a string with a space between each character.</span></span>
<span class="line"><span style="color:#A6ACCD;">for (string::size_type index = 0; index &lt; str1.length(); ++index)</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout &lt;&lt; str1[index] &lt;&lt; &#39; &#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li>`,1),Q=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/k_Y1vfziwxM?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),x=s("h2",{id:"range-based-loops",tabindex:"-1"},[e("Range-Based Loops "),s("a",{class:"header-anchor",href:"#range-based-loops","aria-hidden":"true"},"#")],-1),q=s("p",null,"An Easier Way to Do It!",-1),k=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/G2MM0Q74w7I?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),V=o(`<h2 id="additional-string-operations" tabindex="-1">Additional <code>string</code> Operations <a class="header-anchor" href="#additional-string-operations" aria-hidden="true">#</a></h2><ul><li><p>Swap Function</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">string str1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Warm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">string str2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Cold</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Now, <code>str1</code> is &quot;Cold&quot; and <code>str2</code> is &quot;Warm&quot;.</p></li><li><p>The <code>substr()</code> function the returns portion of a string from a starting index. See the following table for details.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">string sentence </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Houston, we have a problem.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> sentence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Houston</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>The table below has many other useful <code>string</code> member functions.</p></li></ul><p>Table: Some useful <code>string</code> functions where <code>str1</code> and <code>str2</code> are a <code>string</code> variables.</p><table><thead><tr><th>Expression</th><th>Effect</th></tr></thead><tbody><tr><td><code>str1.at(index)</code></td><td>Returns the element at the position specified by <code>index</code>.</td></tr><tr><td><code>str1[index]</code></td><td>Returns the element at the position specified by <code>index</code>.</td></tr><tr><td><code>str1.append(num, ch)</code></td><td>Appends <code>num</code> copies of <code>ch</code> to <code>str1</code>, in which <code>ch</code> is a char variable or a <code>char</code> constant.</td></tr><tr><td><code>str1.append(str2)</code></td><td>Appends <code>str2</code> to <code>str1</code>.</td></tr><tr><td><code>str1.clear()</code></td><td>Deletes all the characters in <code>str1</code>.</td></tr><tr><td><code>str1.compare(str2)</code></td><td>returns <code>1</code> if <code>str1 &gt; str2</code>; returns <code>0</code> if <code>str1 == str2;</code> returns <code>-1</code> if <code>str1 &lt; str2</code>.</td></tr><tr><td><code>str1.empty()</code></td><td>Returns <code>true</code> if <code>str1</code> is empty; otherwise, it returns <code>false</code>.</td></tr><tr><td><code>str1.erase()</code></td><td>Deletes all the characters in <code>str1</code>.</td></tr><tr><td><code>str1.erase(pos, num)</code></td><td>Deletes <code>num</code> characters from <code>str1</code> starting at position <code>pos</code>.</td></tr><tr><td><code>str1.find(str2)</code></td><td>Returns the index of the first occurrence of <code>str2</code> in <code>str1</code>. If <code>str2</code> is not found, the special value <code>string::npos</code> is returned.</td></tr><tr><td><code>str1.find(str2, pos)</code></td><td>Returns the index of the first occurrence at or after <code>pos</code> where <code>str2</code> is found in <code>str1</code>.</td></tr><tr><td><code>str1.find_first_of(str2, pos)</code></td><td>Returns the index of the first occurrence of any character of <code>str1</code> in <code>str2</code>. The search starts at <code>pos</code>.</td></tr><tr><td><code>str1.find_first_not_of(str2, pos)</code></td><td>Returns the index of the first occurrence of any character of <code>str2</code> not in <code>str1</code>. The search starts at <code>pos</code>.</td></tr><tr><td><code>str1.insert(pos, num, ch);</code></td><td>Inserts <code>num</code> occurrences of the character <code>ch</code> at index <code>pos</code> into <code>str1</code>; <code>pos</code> and <code>num</code> are of type <code>string::size_type</code>; <code>ch</code> is a character.</td></tr><tr><td><code>str1.insert(pos, str2);</code></td><td>Inserts all the characters of <code>str2</code> at index <code>pos</code> into <code>str1</code>.</td></tr><tr><td><code>str1.length()</code></td><td>Returns a value of type <code>string::size_type</code> giving the number of characters <code>str1</code>. Equivalent to <code>str1.size()</code></td></tr><tr><td><code>str1.replace(pos, num, str2);</code></td><td>Starting at index <code>pos</code>, replaces the next <code>num</code> characters of <code>str1</code> with all the characters of <code>str2</code>. If <code>num</code> &gt; the length of <code>str1</code>, all the characters until the end of <code>str1</code> are replaced.</td></tr><tr><td><code>str1.substr(pos, len)</code></td><td>Returns a substring of <code>str1</code> starting at <code>pos</code>. The length of the substring is at most <code>len</code> characters. If <code>len</code> is too large, it means &quot;to the end&quot; of the <code>string</code> in <code>str1</code>.</td></tr><tr><td><code>str1.size()</code></td><td>Returns a value of type <code>string::size_type</code> giving the number of characters str1. Equivalent to <code>str1.length()</code> .</td></tr><tr><td><code>str1.swap(str2);</code></td><td>Swaps the contents of <code>str1</code> and <code>str2</code>.</td></tr></tbody></table>`,4);function S(E,H,I,R,M,z){const r=a("mn"),p=a("mrow"),d=a("msup"),i=a("mo"),u=a("math"),h=a("mjx-assistive-mml");return l(),c("div",null,[D,s("ul",null,[s("li",null,[g,s("ul",null,[b,s("li",null,[s("p",null,[C,e(" The maximum value of the (data) type "),_,e(". This number is 4,294,967,295 (i.e., "),s("mjx-container",T,[(l(),c("svg",A,F)),t(h,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[t(u,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[t(d,null,{default:n(()=>[t(r,null,{default:n(()=>[e("2")]),_:1}),t(p,{"data-mjx-texclass":"ORD"},{default:n(()=>[t(r,null,{default:n(()=>[e("32")]),_:1})]),_:1})]),_:1}),t(i,null,{default:n(()=>[e("−")]),_:1}),t(r,null,{default:n(()=>[e("1")]),_:1})]),_:1})]),_:1})]),e(") on many machines.")])])]),v]),w]),Q,x,q,k,V])}const N=m(y,[["render",S]]);export{P as __pageData,N as default};
