import{_ as a,c as n,o as l,ag as i,j as s}from"./chunks/framework.D-HyXncD.js";const u=JSON.parse('{"title":"Loop Design with While Loops","description":"","frontmatter":{},"headers":[],"relativePath":"notes/05-loop-design.md","filePath":"notes/05-loop-design.md","lastUpdated":1735676685000}'),t={name:"notes/05-loop-design.md"};function p(h,e,o,r,d,k){return l(),n("div",null,[...e[0]||(e[0]=[i('<h1 id="loop-design-with-while-loops" tabindex="-1">Loop Design with While Loops <a class="header-anchor" href="#loop-design-with-while-loops" aria-label="Permalink to &quot;Loop Design with While Loops&quot;">​</a></h1><p><em>Chapter 5</em></p><h2 id="why-is-repetition-needed" tabindex="-1">Why Is Repetition Needed? <a class="header-anchor" href="#why-is-repetition-needed" aria-label="Permalink to &quot;Why Is Repetition Needed?&quot;">​</a></h2><ul><li>Repetition allows efficient use of variables.</li><li>We can input, add, and average multiple numbers using a limited number of variables and lines of code.</li><li>For example, to add five numbers: <ul><li>Declare a variable for each number, input the numbers and add the variables together.</li><li>Create a loop that reads a number into a variable and adds it to a variable that contains the sum of the numbers.</li></ul></li></ul><h2 id="while-loops" tabindex="-1">While Loops <a class="header-anchor" href="#while-loops" aria-label="Permalink to &quot;While Loops&quot;">​</a></h2>',5),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/rsSWJpoAADM?showinfo=0;rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),i(`<p>Note: One example in this video is summing the numbers from 1 to 10, in which the program outputs the result of 45. However, the actual sum of the numbers from 1 to 10 is 55! See if you can find the bug in the example code.</p><ul><li><p>The syntax of the while statement is very similar to the <code>if</code> statement:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (expression)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statement;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>The <em>expression</em> acts as a decision-maker and is evaluated as a logical expression.</p></li><li><p>The <em>statement</em> can be simple or compound (i.e., multiple statements surrounded by <code>{}</code>).</p></li><li><p>The <em>statement</em> is called the body of the loop.</p></li><li><p>The parentheses are part of the syntax.</p></li></ul><p>There are a few ways to use a <code>while</code> loop, which we will discuss below.</p><h2 id="loop-design" tabindex="-1">Loop Design <a class="header-anchor" href="#loop-design" aria-label="Permalink to &quot;Loop Design&quot;">​</a></h2><p>There are counter-, sentinel-, and flag-controlled loops.</p>`,5),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/nqU_SJ0bYlk?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),i(`<h3 id="counter-controlled-while-loop" tabindex="-1">Counter-Controlled While Loop <a class="header-anchor" href="#counter-controlled-while-loop" aria-label="Permalink to &quot;Counter-Controlled While Loop&quot;">​</a></h3><p>Here is an example where you do stuff 15 times.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // set a counter to 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // repeat the while counter is less than 15.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  Do stuff here...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // update by one each time the loop iterates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In this example, <code>counter</code> is called the <em>loop-control variable</em>.</p><p><strong>Common mistakes</strong> that cause infinite loops (loops that continue to execute endlessly):</p><ul><li><p>Make sure to include a statement in the loop body that will eventually make the test condition <code>false</code>.</p><ul><li>Make sure to update your loop-control variable inside the loop, so the loop will exit.</li><li>If you have an infinite loop, press Ctrl+C to exit your program.</li></ul></li><li><p>Make sure you initialize the counter before the <code>while</code> loop or the value may be incorrect.</p></li><li><p>Don’t put a semicolon after the test condition.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Infinite loop, because of the ; placement</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="sentinel-controlled-while-loop" tabindex="-1">Sentinel-Controlled While Loop <a class="header-anchor" href="#sentinel-controlled-while-loop" aria-label="Permalink to &quot;Sentinel-Controlled While Loop&quot;">​</a></h3><p>A <em>sentinel</em> value is used to determine if the loop should end.</p><p>Usually, this is given to you by the user (from a file).</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Enter numbers to add until you are finished&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, them input -1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // -1 is the sentinel value causing the program to exit.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="flag–controlled-while-loop-very-similar-to-sentinel" tabindex="-1">Flag–Controlled While Loop (very similar to sentinel) <a class="header-anchor" href="#flag–controlled-while-loop-very-similar-to-sentinel" aria-label="Permalink to &quot;Flag–Controlled While Loop (very similar to sentinel)&quot;">​</a></h3><p>If you are looking for something and can quit once you find it, you can set a Boolean value to false and when you find what you are looking for, you set the value to true, and the loop exits.</p><p>Here is some sample code:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">done)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // done is the flag variable. (!done is preferred over done == false)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Do something...;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (found what you wanted to)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Do something else...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="eof-controlled-while-loop" tabindex="-1"><code>EOF</code>-Controlled While Loop <a class="header-anchor" href="#eof-controlled-while-loop" aria-label="Permalink to &quot;\`EOF\`-Controlled While Loop&quot;">​</a></h2><p>A use case for a sentinel-controlled loop is when reading from a file. See <a href="./05-file-loops">Reading from Files with Loops</a> for more information.</p><h2 id="other-expressions" tabindex="-1">Other Expressions <a class="header-anchor" href="#other-expressions" aria-label="Permalink to &quot;Other Expressions&quot;">​</a></h2><p>The expression in a <code>while</code> statement can be complex. For example,</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((noOfGuesses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isGuessed))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    . . .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,19)])])}const E=a(t,[["render",p]]);export{u as __pageData,E as default};
