import{_ as s,o as a,c as l,a as t,b as e,e as n}from"./app.b7d181d2.js";const v=JSON.parse('{"title":"Logic and Math","description":"","frontmatter":{},"headers":[{"level":2,"title":"Everything is a Number","slug":"everything-is-a-number","link":"#everything-is-a-number","children":[]},{"level":2,"title":"Truth Tables","slug":"truth-tables","link":"#truth-tables","children":[]},{"level":2,"title":"Examples","slug":"examples","link":"#examples","children":[]},{"level":2,"title":"Operator Precedence","slug":"operator-precedence","link":"#operator-precedence","children":[]},{"level":2,"title":"Short-Circuit Evaluation","slug":"short-circuit-evaluation","link":"#short-circuit-evaluation","children":[]},{"level":2,"title":"Self-Check Questions","slug":"self-check-questions","link":"#self-check-questions","children":[]}],"relativePath":"notes/04-logic.md","lastUpdated":1672107614000}'),o={name:"notes/04-logic.md"},r=t("h1",{id:"logic-and-math",tabindex:"-1"},[e("Logic and Math "),t("a",{class:"header-anchor",href:"#logic-and-math","aria-hidden":"true"},"#")],-1),p=t("p",null,[t("em",null,"Chapter 4")],-1),c=t("h2",{id:"everything-is-a-number",tabindex:"-1"},[e("Everything is a Number "),t("a",{class:"header-anchor",href:"#everything-is-a-number","aria-hidden":"true"},"#")],-1),d=t("p",null,"Remember, to a computer, everything is a number, even characters.",-1),i=t("div",{class:"youtube"},[t("div",null,[t("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/SQKvGrGODss?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),h=t("h2",{id:"truth-tables",tabindex:"-1"},[e("Truth Tables "),t("a",{class:"header-anchor",href:"#truth-tables","aria-hidden":"true"},"#")],-1),y=t("div",{class:"youtube"},[t("div",null,[t("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/8xcgTz23GtY?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),m=n(`<p>A convenient and helpful way to organize the possible values of any logical (Boolean) statement is in a truth table. A <em>truth table</em> is a table whose column headings are expressions, and whose rows are possible scenarios given the expressions. For example, in the NOT table below, if <em>p</em> is <code>true</code> (T), then “<em>not p</em>” (!<em>p</em>) must be <code>false</code> (e.g., if <em>p</em> means it “is raining” then !<em>p</em> means it is “not raining”).</p><table><thead><tr><th><em>p</em></th><th style="text-align:center;"><strong>!p</strong></th></tr></thead><tbody><tr><td>T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td style="text-align:center;">T</td></tr></tbody></table><p>Table: Truth table for the <strong>NOT</strong> function.</p><table><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>p &amp;&amp; q</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">T</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">F</td></tr></tbody></table><p>Table: Truth table for the <strong>AND</strong> function.</p><table><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>p || q</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">T</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">T</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">T</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">F</td></tr></tbody></table><p>Table: Truth table for the <strong>OR</strong> function.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><table><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>p || q</strong></th><th style="text-align:center;"><strong>! (p || q)</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">F</td><td style="text-align:center;">T</td></tr></tbody></table><p>Table: Truth table for ! (<em>p</em> || <em>q</em>) with intermediate step.</p><table><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>!p</strong></th><th style="text-align:center;"><strong>!q</strong></th><th style="text-align:center;"><strong>!p &amp;&amp; !q</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">F</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">T</td><td style="text-align:center;">T</td><td style="text-align:center;">T</td></tr></tbody></table><p>Table: Truth table for !<em>p</em> &amp;&amp; !<em>q</em> with intermediate steps.</p><p>Note that !(<em>p</em> || <em>q</em>) has the same truth-table results as !<em>p</em> &amp;&amp; !<em>q</em>. That means that the two statements are <em>logically equivalent</em>.</p><h2 id="operator-precedence" tabindex="-1">Operator Precedence <a class="header-anchor" href="#operator-precedence" aria-hidden="true">#</a></h2><ul><li>Relational and logical operators are evaluated from left to right <ul><li>The associativity is left to right</li></ul></li><li>Parentheses can override precedence</li></ul><table><thead><tr><th style="text-align:center;">Operators</th><th>Precedence</th></tr></thead><tbody><tr><td style="text-align:center;"><code>!</code>, <code>+</code>, <code>-</code> (unary operators)</td><td>first</td></tr><tr><td style="text-align:center;"><code>*</code>, <code>/</code>, <code>%</code></td><td>second</td></tr><tr><td style="text-align:center;"><code>+</code>, <code>-</code></td><td>third</td></tr><tr><td style="text-align:center;"><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code></td><td>fourth</td></tr><tr><td style="text-align:center;"><code>==</code>, <code>!=</code></td><td>fifth</td></tr><tr><td style="text-align:center;"><code>&amp;&amp;</code></td><td>sixth</td></tr><tr><td style="text-align:center;">\`</td><td></td></tr><tr><td style="text-align:center;"><code>=</code></td><td>last</td></tr></tbody></table><p>Try to create more advanced combinations for truth tables like:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">q </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">q </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> q</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>What does this evaluate to?</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Remember <code>false</code> is <code>0</code> and <code>true</code> is a nonzero value.</p><h2 id="short-circuit-evaluation" tabindex="-1">Short-Circuit Evaluation <a class="header-anchor" href="#short-circuit-evaluation" aria-hidden="true">#</a></h2><p><em>Short-circuit evaluation</em> is the evaluation of a logical expression that stops as soon as the value of the expression is known.</p><ul><li><p>Example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> //Line 1  </span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">grade </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> //Line 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Example to prevent dividing by zero.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> demon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">denom </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> denom </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> has the same sign as </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> denom </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><details class="details custom-block"><summary>Trick, trick question: If the value of <code>num</code> is <code>0</code>, what is it after: <code>if(num &amp;&amp; num = 2) …</code>?</summary><p>Answer: <code>num</code> would still equal <code>0</code>. But it would equal <code>2</code> if you changed the <code>&amp;&amp;</code> to <code>||</code>.</p></details><h2 id="self-check-questions" tabindex="-1">Self-Check Questions <a class="header-anchor" href="#self-check-questions" aria-hidden="true">#</a></h2><ol><li>Be able to fill in the truth tables.</li><li>Use truth tables to determine if two expressions are logically equivalent.</li><li>Does the following expression evaluate to <code>true</code> or <code>false</code>? <ul><li><code>1 + 2 &lt; 10 || (4 * 2 != 9 &amp;&amp; -4 / 2 &lt;= -4)</code></li></ul></li></ol>`,27),u=[r,p,c,d,i,h,y,m];function D(F,C,g,b,A,x){return a(),l("div",null,u)}const T=s(o,[["render",D]]);export{v as __pageData,T as default};
