import{_ as n,o as l,c as e,e as a,a as s}from"./app.d5c7b695.js";const F=JSON.parse('{"title":"Static and Automatic Variables","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example use of a static variable","slug":"example-use-of-a-static-variable","link":"#example-use-of-a-static-variable","children":[]}],"relativePath":"notes/06-static-variables.md","lastUpdated":1672192110000}'),p={name:"notes/06-static-variables.md"},o=a('<h1 id="static-and-automatic-variables" tabindex="-1">Static and Automatic Variables <a class="header-anchor" href="#static-and-automatic-variables" aria-hidden="true">#</a></h1><ul><li><p><strong>Automatic variable</strong>: memory is allocated at block entry and deallocated at block exit</p><ul><li><p>In C++, a block is code within curly brackets (functions, loops, etc.)</p></li><li><p>By default, variables declared within a block are automatic variables</p></li></ul></li><li><p><strong>Static variable</strong>: memory remains allocated if the program executes</p><ul><li><p>Global variables declared outside of any block are static variables</p></li><li><p>Syntax: <code>static dataType identifier = value;</code></p></li><li><p>Static variables declared within a block are local to the block have same scope as any other local identifier in that block.</p></li></ul></li></ul>',2),t=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/2mY0yi3rxRk",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"allowfullscreen"})])],-1),c=a(`<h2 id="example-use-of-a-static-variable" tabindex="-1">Example use of a static variable <a class="header-anchor" href="#example-use-of-a-static-variable" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">numberToAdd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> total </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // declare and initialize variable that</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                             // remains over the whole program run.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    total </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> numberToAdd</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // add number to total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> total</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // return updated total</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // num = 1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // num = 3.0</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // num = 5.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Question: What would happen if the variable was not <code>static</code>?<br> Answer: <code>num</code> would always equal the argument passed into the function:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // num = 1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // num = 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runningTotal</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // num = 2.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,5),r=[o,t,c];function i(y,u,d,b,D,m){return l(),e("div",null,r)}const A=n(p,[["render",i]]);export{F as __pageData,A as default};
