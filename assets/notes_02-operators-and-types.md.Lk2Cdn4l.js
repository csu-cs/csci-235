import{_ as o,c as r,o as n,j as e,a as t,a4 as a}from"./chunks/framework.BcwY1zTc.js";const k=JSON.parse('{"title":"Operators and Types","description":"","frontmatter":{},"headers":[],"relativePath":"notes/02-operators-and-types.md","filePath":"notes/02-operators-and-types.md","lastUpdated":1704505001000}'),i={name:"notes/02-operators-and-types.md"},d=e("h1",{id:"operators-and-types",tabindex:"-1"},[t("Operators and Types "),e("a",{class:"header-anchor",href:"#operators-and-types","aria-label":'Permalink to "Operators and Types"'},"​")],-1),l=e("p",null,[e("em",null,"Chapter 2")],-1),s=e("h2",{id:"overview",tabindex:"-1"},[t("Overview "),e("a",{class:"header-anchor",href:"#overview","aria-label":'Permalink to "Overview"'},"​")],-1),c=e("p",null,"This 27-minute video is an overview of the second part of Chapter 2.",-1),h=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/ZLf0YbC2bmg?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),p=e("h2",{id:"casting-numbers-between-ints-and-doubles",tabindex:"-1"},[t("Casting numbers between "),e("code",null,"int"),t("s and "),e("code",null,"double"),t("s "),e("a",{class:"header-anchor",href:"#casting-numbers-between-ints-and-doubles","aria-label":'Permalink to "Casting numbers between `int`s and `double`s"'},"​")],-1),b=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/CZg4uZaE5kg?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),m=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This video describes opening Atom. Instead of what is shown, open your code in <em>VS Code</em> by typing <code>code casting.cpp</code>.</p></div><h2 id="arithmetic-operators-in-c" tabindex="-1">Arithmetic Operators in C++ <a class="header-anchor" href="#arithmetic-operators-in-c" aria-label="Permalink to &quot;Arithmetic Operators in C++&quot;">​</a></h2><table tabindex="0"><caption>The C++ arithmetic operators.</caption><thead><tr><th style="text-align:center;">Operator</th><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:left;">addition</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:left;">subtraction</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:left;">multiplication</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:left;">division</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:left;">modulus (or remainder) operator</td></tr><tr><td style="text-align:center;">++</td><td style="text-align:left;">increment</td></tr><tr><td style="text-align:center;">--</td><td style="text-align:left;">decrement</td></tr></tbody></table><p>The following video explains the increment, decrement, and modulus operators.</p>',4),u=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/xgycVLWlpic?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),_=a('<ul><li>Increment operator: increase variable by 1 <ul><li>Pre-increment: <code>++variable</code></li><li>Post-increment: <code>variable++</code></li></ul></li><li>Decrement operator: decrease variable by 1 <ul><li>Pre-decrement: <code>--variable</code></li><li>Post-decrement: <code>variable--</code></li></ul></li></ul><p>What is the difference between the following?</p><table tabindex="0"><caption>After watching the video, check your understanding by determining what <code>alpha</code> and <code>beta</code> equal in each of these examples.</caption><thead><tr><th>Pre-increment</th><th>Post-increment</th></tr></thead><tbody><tr><td><code>int alpha = 5;</code></td><td><code>int alpha = 5;</code></td></tr><tr><td><code>int beta = ++alpha;</code></td><td><code>int beta = alpha++</code>;</td></tr></tbody></table>',3),y=[d,l,s,c,h,p,b,m,u,_];function f(g,w,v,x,T,P){return n(),r("div",null,y)}const A=o(i,[["render",f]]);export{k as __pageData,A as default};
