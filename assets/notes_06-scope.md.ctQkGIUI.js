import{_ as o,o as a,c as t,R as i,k as e}from"./chunks/framework.FOt1pWjv.js";const T=JSON.parse('{"title":"Scope","description":"","frontmatter":{},"headers":[],"relativePath":"notes/06-scope.md","filePath":"notes/06-scope.md","lastUpdated":1702474223000}'),l={name:"notes/06-scope.md"},n=i('<h1 id="scope" tabindex="-1">Scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;Scope&quot;">​</a></h1><p><em>Chapter 6</em></p><h2 id="void-functions" tabindex="-1">Void Functions <a class="header-anchor" href="#void-functions" aria-label="Permalink to &quot;Void Functions&quot;">​</a></h2><ol><li><em>Value-returning functions</em> have a return type. <ul><li>Return a value of a specific data type using the return statement</li></ul></li><li><em>Void functions</em> do not have a return type. <ul><li>Do not use a return statement to return a value.</li></ul></li></ol><p>Not all functions return a value.</p>',5),r=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/5_HcYUkEPH4?rel=0&showinfo=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),s=i('<h2 id="scope-of-an-identifier" tabindex="-1">Scope of an Identifier <a class="header-anchor" href="#scope-of-an-identifier" aria-label="Permalink to &quot;Scope of an Identifier&quot;">​</a></h2><p>The <em>Scope</em> of an identifier is where in the program the identifier is accessible.</p><p>Types of Scopes:</p><ul><li><strong>Local identifier</strong>: identifiers declared within a function (or block)</li><li><strong>Global identifier</strong>: identifiers declared outside of every function definition</li><li>C++ does not allow nested functions, which is the definition of one function inside of another function&#39;s body.</li></ul><p>Rules when an identifier is accessed:</p><ul><li><p>Must be declared before being used.</p></li><li><p>Global identifiers are accessible by a function or block if:</p><ul><li>Declared before the function definition</li><li>All local identifiers (variables and parameters) have different names than the global identifier.</li></ul></li><li><p>Nested block</p><ul><li>Identifiers are accessible from their declaration to the end of the block where it is declared.</li><li>Within nested blocks if no identifier with the same name exists</li></ul></li><li><p>The <em>scope</em> of a function name is like the scope of an identifier declared outside any block.</p><ul><li>i.e., function name scope = global variable scope</li></ul></li><li><p>By using the <em>scope-resolution operator</em>, <code>::</code>,</p><ul><li>A global variable declared before the definition of a function (or block) can be accessed by the function (or block).</li><li>Even if the function (or block) has an identifier with the same name as the global variable.</li></ul></li></ul>',6),c=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/ZTGujDzKMbw",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"allowfullscreen"})])],-1),d=i('<h2 id="global-variables-are-problematic" tabindex="-1">Global Variables Are Problematic <a class="header-anchor" href="#global-variables-are-problematic" aria-label="Permalink to &quot;Global Variables Are Problematic&quot;">​</a></h2><ul><li><strong>Do NOT use global variables unless they are constants</strong>!</li><li>Using global variables causes side effects. <ul><li>A function that uses global variables is not independent</li><li>If more than one function uses the same global variable, <ul><li>Debugging problems with the global variable is more difficult.</li><li>Problems caused in one area of the program may appear to be from another area.</li></ul></li></ul></li><li>Global named constants have no side effects because they never change values.</li></ul><h2 id="creating-an-animation" tabindex="-1">Creating an Animation <a class="header-anchor" href="#creating-an-animation" aria-label="Permalink to &quot;Creating an Animation&quot;">​</a></h2><p>This video is an example of putting the things we know together for something fun. You also learn more about timing.</p>',4),u=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/uagjplSPneg?rel=0&showinfo=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),f=[n,r,s,c,d,u];function h(b,p,m,_,g,w){return a(),t("div",null,f)}const k=o(l,[["render",h]]);export{T as __pageData,k as default};
