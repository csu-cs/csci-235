import{_ as a,c as e,o as n,V as i,m as s}from"./chunks/framework.2iDS5gvo.js";const f=JSON.parse('{"title":"Do…While Loop and For Loops","description":"","frontmatter":{},"headers":[],"relativePath":"notes/05-do-while-for.md","filePath":"notes/05-do-while-for.md","lastUpdated":1672192110000}'),t={name:"notes/05-do-while-for.md"},l=i(`<h1 id="do-while-loop-and-for-loops" tabindex="-1">Do…While Loop and For Loops <a class="header-anchor" href="#do-while-loop-and-for-loops" aria-label="Permalink to &quot;Do…While Loop and For Loops&quot;">​</a></h1><p><em>Chapter 5</em></p><h2 id="do-while-loops" tabindex="-1">Do…While Loops <a class="header-anchor" href="#do-while-loops" aria-label="Permalink to &quot;Do…While Loops&quot;">​</a></h2><p>Do…while loops work just like a while loop but the body of the loop <strong>will be run at least once</strong>.</p><p>Syntax:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //These things</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (guard statement);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //&lt;- notice the semicolon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,6),p=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/TvLIgmdNN8M?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),o=i(`<div class="info custom-block"><p class="custom-block-title">INFO</p><p>To use <code>INT_MAX</code> as described in this video, include the <code>climits</code> hearder.</p></div><h2 id="for-loops" tabindex="-1">For Loops <a class="header-anchor" href="#for-loops" aria-label="Permalink to &quot;For Loops&quot;">​</a></h2><p>This type of loop runs for a specific number of times. Use this type for all counter-controlled loops.</p><p>Syntax:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (initial statement; loop condition; update statement)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      statement;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>The initial statement, loop condition, and update statement are called for loop control statements</p></li><li><p>It is like a counter-controlled while loop, but you initialize, compare, and update the counter all on the first line.</p></li></ul>`,6),h=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/ELmekLaI20M?rel=0&showinfo=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),r=i(`<p>Example: Count from 0 to 9:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">counter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Big no-no: Don’t put a semicolon after the for loop:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; iter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &lt;- no-no</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This will compile, but it will do nothing 100 times and then go on to your intended looped instruction (running them only once).</p><h2 id="choosing-the-right-looping-structure" tabindex="-1">Choosing the Right Looping Structure <a class="header-anchor" href="#choosing-the-right-looping-structure" aria-label="Permalink to &quot;Choosing the Right Looping Structure&quot;">​</a></h2><p>All three loops have their place in C++</p><ol><li>If the loop must run at least once, use a <code>do…while</code> loop.</li><li>Otherwise, if you know or can determine in advance the number of repetitions needed, the <code>for</code> loop is the correct choice (i.e., a counter-controlled loop).</li><li>Otherwise, use a <code>while</code> loop.</li></ol><h2 id="break-and-continue-statements" tabindex="-1"><code>break</code> and <code>continue</code> Statements <a class="header-anchor" href="#break-and-continue-statements" aria-label="Permalink to &quot;\`break\` and \`continue\` Statements&quot;">​</a></h2><p>The <code>break</code> and <code>continue</code> alter the flow of control of loops.</p><p>The <code>break</code> statement:</p><ul><li>The <code>break</code> statement is used for two purposes: <ol><li>To exit early from a loop <ul><li>Can eliminate the use of certain (flag) variables.</li><li>Generally, using a <code>break</code> in this way is bad design.</li></ul></li><li>To skip the remainder of a <code>switch</code> structure</li></ol></li><li>After a <code>break</code> executes, the program continues with the first statement <em>after</em> the structure.</li></ul><p>The <code>continue</code> statement:</p><ul><li><code>continue</code> is used in <code>while</code>, <code>for</code>, and <code>do…while</code> structures</li><li>When executed in a loop</li><li>It skips the remaining statements and proceeds with the next iteration of the loop.</li></ul><p><strong>Avoid using <code>break</code> and <code>continue</code> statements with loops.</strong> Generally, exiting interrupting the normal flow of execution is considered poor programming design. Usually, you can avoid <code>break</code> statements by updating the loop condition. You can avoid <code>continue</code> statements by using a condition (<code>if</code> or <code>switch</code> statement) inside the loop.</p><h2 id="nested-control-structures" tabindex="-1">Nested Control Structures <a class="header-anchor" href="#nested-control-structures" aria-label="Permalink to &quot;Nested Control Structures&quot;">​</a></h2><ul><li><p>To create the following pattern:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">****</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*****</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>We can use the following code:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIZE; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">row)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p>What is the result if we replace the first for statement with this?</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIZE; row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">row)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="self-check-questions" tabindex="-1">Self-Check Questions <a class="header-anchor" href="#self-check-questions" aria-label="Permalink to &quot;Self-Check Questions&quot;">​</a></h2><ol><li>What is the difference between a while and a <code>do…while</code>?</li><li>What is the syntax for a <code>while</code> statement?</li><li>What it is an infinite loop?</li><li>Compare and contrast while and <code>for</code> loops.</li><li>Know the syntax of a <code>for</code> loop.</li></ol>`,21),d=[l,p,o,h,r];function k(c,u,E,g,b,m){return n(),e("div",null,d)}const w=a(t,[["render",k]]);export{f as __pageData,w as default};
