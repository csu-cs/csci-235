import{_ as e,o as n,c as l,a as s,b as a,e as p}from"./app.b7d181d2.js";const g=JSON.parse('{"title":"Namespaces","description":"","frontmatter":{},"headers":[],"relativePath":"notes/07-namespaces.md","lastUpdated":1672203699000}'),o={name:"notes/07-namespaces.md"},t=s("h1",{id:"namespaces",tabindex:"-1"},[a("Namespaces "),s("a",{class:"header-anchor",href:"#namespaces","aria-hidden":"true"},"#")],-1),c=s("p",null,[s("em",null,"Chapter 7")],-1),i=s("p",null,[a("What does this statement, "),s("code",null,"using namespace std;"),a(" do and what similar statements can we use? Find out here!")],-1),r=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/dv4Ec3A500g?rel=0&showinfo=0",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"allowfullscreen"})])],-1),m=p(`<p>Problems with conflicting global identifiers (constants, functions, <code>enum</code> types, etc.):</p><ol><li><p>Global identifiers in a header file used in a program become global in the program</p><ul><li>A syntax error occurs if an identifier has the same name as a global identifier in the header file</li></ul></li><li><p>The same problem can occur with third-party libraries</p><ul><li>Common solution: third-party vendors begin their global identifiers with <code>_</code> (underscore)<br> Do not begin identifiers in your program with <code>_</code></li></ul></li></ol><p>Namespaces attempt to solve these problems.</p><ul><li>A namespace includes members, which have a scope that is local to the namespace.</li></ul><p>Syntax to create a namespace:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">NamespaceName</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// NamespaceName can be any identifier you want</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Put here: variable declarations, named constants, functions, </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // or another namespace</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> MAX_SIZE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Example Constant</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">calculateSize</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">    // Example function prototype; definitions go</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                            // below the namespace (and below main)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> // &lt;-- No semicolon here</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NamespaceName</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">calculateSize</span><span style="color:#89DDFF;">()</span><span style="color:#676E95;font-style:italic;">  // Example function definition</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><p>A namespace member can be accessed outside the namespace:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">NamespaceName</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">identifier</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Or the identifier can be used without specifying the namespace if you use:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NamespaceName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Or for just the specific identifier.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NamespaceName</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">MAX_SIZE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>After the using statement, it is NOT necessary to put the <code>NamespaceName::</code> before the namespace member.<br> Unless a namespace member and a global identifier or a block identifier have the same name.</p></li><li><p>Example for defining a function with a prototype in a namespace (below main).<br> (See the example of <code>calculateSize()</code> above).</p></li></ul>`,7),d=[t,c,i,r,m];function u(b,y,h,F,f,C){return n(),l("div",null,d)}const D=e(o,[["render",u]]);export{g as __pageData,D as default};
