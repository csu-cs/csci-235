import{_ as t,c as a,o,ag as i,j as e}from"./chunks/framework.tiAm85pl.js";const l="/csci-235/assets/parts-of-a-function.CnM_HHEd.svg",f=JSON.parse('{"title":"Introduction to Function","description":"","frontmatter":{},"headers":[],"relativePath":"notes/06-functions-intro.md","filePath":"notes/06-functions-intro.md","lastUpdated":1672192110000}'),s={name:"notes/06-functions-intro.md"};function r(c,n,u,h,d,p){return o(),a("div",null,n[0]||(n[0]=[i('<h1 id="introduction-to-function" tabindex="-1">Introduction to Function <a class="header-anchor" href="#introduction-to-function" aria-label="Permalink to &quot;Introduction to Function&quot;">​</a></h1><p><em>Chapter 6</em></p><h2 id="important-prerequisite-concepts-to-this-chapter" tabindex="-1">Important Prerequisite Concepts to this Chapter <a class="header-anchor" href="#important-prerequisite-concepts-to-this-chapter" aria-label="Permalink to &quot;Important Prerequisite Concepts to this Chapter&quot;">​</a></h2><ul><li>The compiler (e.g. g++), translates to C++ code into an executable (machine code the computer can run). A program only needs to be compiled once and then it can be run many times.</li><li>When you declare a variable, you are creating a place in memory to hold a specific type of value (e.g., <code>double</code>, <code>int</code>, <code>string</code>). Also, the variable type indicates what the variable is evaluated as when used in an expression.</li></ul><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><ul><li>Functions are like miniature programs that can be combined to form larger programs.</li><li>They allow complicated programs to be divided into manageable pieces.</li><li>In C++, a value-returning function is analogous to a function in algebra in that it (1) has a name, (2) can accept input values called parameters, and (3) does some computation.</li><li>Some of the predefined mathematical functions are from the <code>cmath</code> header: <ul><li><code>sqrt(num) // returns the square root of the argument num</code></li><li><code>pow(base, exponent) // returns base raised to the power exponent.</code></li><li><code>floor(num) // returns round down value</code></li></ul></li><li>A couple of predefined character functions from the <code>cctype</code> header are <code>tolower()</code> and <code>toupper()</code>, which accept a single <code>char</code> and convert it to lowercase or uppercase, respectively.</li></ul><h2 id="using-value-returning-functions" tabindex="-1">Using Value-Returning Functions <a class="header-anchor" href="#using-value-returning-functions" aria-label="Permalink to &quot;Using Value-Returning Functions&quot;">​</a></h2><p>To <em>call</em> (i.e use) these functions you must:</p><ul><li>Include the appropriate header file in your program using the include statement.</li><li>Know the following items: <ul><li>The <strong>name</strong> of the function</li><li>The number of <strong>parameters</strong> (if any) and the type of each parameter</li><li>The <strong>data type</strong> of the value returned: called the type of the function</li></ul></li><li>The value returned by a value-returning function can be (1) stored in a variable for further calculation, (2) used in some calculation, or (3) output directly. <ul><li>i.e., a value-returning function may be used in an assignment or in an output statement.</li></ul></li></ul><h2 id="defining-your-own-functions" tabindex="-1">Defining Your Own Functions <a class="header-anchor" href="#defining-your-own-functions" aria-label="Permalink to &quot;Defining Your Own Functions&quot;">​</a></h2><p>In this video, I mention that the function <code>larger()</code> could be written more succinctly. See if you can figure out how to write it without the local variable named <code>max</code> (hint: use two return statements). Then see if you can reduce it to just a return statement using the <a href="./04-prevent-errors#the-conditional-operator">conditional operator (<code>?:</code>)</a>.</p>',11),e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/cuCE-jpJPpk?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),i(`<p>To define your own function, you need to following components.</p><ul><li><strong>Heading</strong> (or <strong>function header</strong>): the first line of the function <ul><li>Example: <code>int abs(int number)</code></li></ul></li><li><strong>Formal parameter</strong>: variable declared in the heading <ul><li>Example: number</li></ul></li><li><strong>Actual parameter</strong>: variable or expression listed in a call to a function <ul><li>Example: <code>result = pow(base, power);</code></li></ul></li></ul><h3 id="syntax-of-a-function-definition" tabindex="-1">Syntax of a Function Definition <a class="header-anchor" href="#syntax-of-a-function-definition" aria-label="Permalink to &quot;Syntax of a Function Definition&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnType</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> functionName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> paramName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> paramName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statements;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> returnType;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The <code>returnType</code> is also called the <em>data type</em> or <em>function type</em>.</p><figure><img src="`+l+`" alt="Parts of a Function"></figure><h3 id="return-statement" tabindex="-1">Return Statement <a class="header-anchor" href="#return-statement" aria-label="Permalink to &quot;Return Statement&quot;">​</a></h3><p>The function returns its value and ends via the return statement.</p><ul><li>It passes this value outside the function</li><li>Syntax: <code>return expr;</code><ul><li>In C++, <code>return</code> is a reserved word.</li></ul></li><li>When a return statement executes... <ol><li>The function immediately terminates</li><li>Control goes back to the caller</li></ol></li><li>When a return statement executes in the <code>main()</code> function, the program terminates.</li><li>All paths through a value-returning function must return a value! <ul><li>Example of Error: need a return value when <code>num &lt;= 5</code>.</li></ul></li></ul><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &lt;- this is bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>Only one value can be returned from a function.</li><li>Void functions do not require a return statement, but one can be used (without any value) to exit the function early. (More on <code>void</code> functions later.)</li></ul><h2 id="calling-a-function-i-e-running-the-function" tabindex="-1">Calling a function (i.e., running the function) <a class="header-anchor" href="#calling-a-function-i-e-running-the-function" aria-label="Permalink to &quot;Calling a function (i.e., running the function)&quot;">​</a></h2><p>Syntax: <code>functionName (actual parameter list)</code></p><ul><li>Syntax of the actual parameter list: <ul><li>expression or variable, expression or variable, …</li></ul></li><li>The actual parameter list can be empty as in this function call. <ul><li><code>functionName()</code></li></ul></li><li>A call to a value-returning function with an empty formal parameter list is: <ul><li><code>value = functionName();</code></li></ul></li></ul><h2 id="function-prototype-function-declarations" tabindex="-1">Function Prototype / Function Declarations <a class="header-anchor" href="#function-prototype-function-declarations" aria-label="Permalink to &quot;Function Prototype / Function Declarations&quot;">​</a></h2><p>A function <em>prototype</em> is the function’s heading without the body of the function.</p><ul><li>Has a semicolon at the end.</li><li>Not necessary to specify the variable name in the parameter list, but recommended.</li><li>The data type of each parameter must be specified.</li><li>A Function prototype is often called a <em>function declaration</em> or <em>forward declaration</em>, as opposed to a <em>function definition</em>, which must include the function’s body.</li><li><strong>Always include function prototypes before <code>main()</code> and definitions below <code>main()</code>.</strong></li><li><strong>Each function prototype should be directly preceded by a comment describing what the function does and how to use (call) it.</strong></li></ul><h2 id="flow-of-execution" tabindex="-1">Flow of Execution <a class="header-anchor" href="#flow-of-execution" aria-label="Permalink to &quot;Flow of Execution&quot;">​</a></h2><ul><li>Execution always begins at the first statement in the <code>main()</code> function.</li><li>Other functions are executed only when called.</li><li>Function prototypes (also called function declarations) appear before any function definition. <ol><li>The compiler translates function prototypes first.</li><li>The compiler can then correctly translate a function call.</li></ol></li><li>Function call transfers control to the first statement in the body of the called function.</li><li>When the end of a called function is executed, control is passed back to the point immediately following the function call. <ul><li>The function’s returned value replaces the function call statement</li></ul></li></ul><h2 id="common-mistakes" tabindex="-1">Common Mistakes <a class="header-anchor" href="#common-mistakes" aria-label="Permalink to &quot;Common Mistakes&quot;">​</a></h2><p>Avoid these common mistakes when defining functions.</p>`,21),e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/w9askbxPEdM?rel=0&showinfo=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),i('<ul><li>Your code should have <strong>NO</strong> non-constant global variables (more on this later).</li><li>Defining a function inside a function.</li><li>Forgetting the prototype (Don’t put the function definition before <code>main()</code>; use a prototype.)</li><li>Forgetting the semicolon after the prototype.</li><li>Forgetting to return a value.</li><li>Putting code after the return.</li><li>Putting the variable type in the function call.</li><li>Having a variable with the same name as a function.</li><li>Trying to return multiple values. (Only one value will be returned, even if the values are comma separated. It will compile without errors, but will not work).</li><li>Including the parameter types for a function call. The compiler already knows the types.</li></ul><h2 id="self-check-questions" tabindex="-1">Self-Check Questions <a class="header-anchor" href="#self-check-questions" aria-label="Permalink to &quot;Self-Check Questions&quot;">​</a></h2><ol><li>What is a function definition and what is a function prototype?</li><li>What are some predefined functions we have used?</li><li>What are formal and actual parameters?</li><li>What is a function call?</li><li>What good is a function that is never called?</li><li>Create a function that can multiply two integers and return an integer.</li></ol>',3)]))}const g=t(s,[["render",r]]);export{f as __pageData,g as default};
