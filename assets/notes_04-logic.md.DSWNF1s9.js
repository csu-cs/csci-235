import{_ as i,c as a,o as n,j as t,ag as l,a as e}from"./chunks/framework.D6Rf-zYX.js";const m=JSON.parse('{"title":"Logic and Math","description":"","frontmatter":{},"headers":[],"relativePath":"notes/04-logic.md","filePath":"notes/04-logic.md","lastUpdated":1675810275000}'),d={name:"notes/04-logic.md"};function r(h,s,p,o,c,k){return n(),a("div",null,s[0]||(s[0]=[t("h1",{id:"logic-and-math",tabindex:"-1"},[e("Logic and Math "),t("a",{class:"header-anchor",href:"#logic-and-math","aria-label":'Permalink to "Logic and Math"'},"​")],-1),t("p",null,[t("em",null,"Chapter 4")],-1),t("h2",{id:"everything-is-a-number",tabindex:"-1"},[e("Everything is a Number "),t("a",{class:"header-anchor",href:"#everything-is-a-number","aria-label":'Permalink to "Everything is a Number"'},"​")],-1),t("p",null,"Remember, to a computer, everything is a number, even characters.",-1),t("div",{class:"youtube"},[t("div",null,[t("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/SQKvGrGODss?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),t("h2",{id:"truth-tables",tabindex:"-1"},[e("Truth Tables "),t("a",{class:"header-anchor",href:"#truth-tables","aria-label":'Permalink to "Truth Tables"'},"​")],-1),t("div",{class:"youtube"},[t("div",null,[t("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/8xcgTz23GtY?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),l(`<p>A convenient and helpful way to organize the possible values of any logical (Boolean) statement is in a truth table. A <em>truth table</em> is a table whose column headings are expressions, and whose rows are possible scenarios given the expressions. For example, in the NOT table below, if <em>p</em> is <code>true</code> (T), then “<em>not p</em>” (!<em>p</em>) must be <code>false</code> (e.g., if <em>p</em> means it “is raining” then !<em>p</em> means it is “not raining”).</p><table tabindex="0"><caption>Truth table for the <strong>NOT</strong> function.</caption><thead><tr><th><em>p</em></th><th style="text-align:center;"><strong>!p</strong></th></tr></thead><tbody><tr><td>T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td style="text-align:center;">T</td></tr></tbody></table><table tabindex="0"><caption>Truth table for the <strong>AND</strong> function.</caption><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>p &amp;&amp; q</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">T</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">F</td></tr></tbody></table><table tabindex="0"><caption>Truth table for the <strong>OR</strong> function.</caption><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>p || q</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">T</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">T</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">T</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">F</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><table tabindex="0"><caption>Truth table for ! (<em>p</em> || <em>q</em>) with intermediate step.</caption><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>p || q</strong></th><th style="text-align:center;"><strong>! (p || q)</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">F</td><td style="text-align:center;">T</td></tr></tbody></table><table tabindex="0"><caption>Truth table for !<em>p</em> &amp;&amp; !<em>q</em> with intermediate steps.</caption><thead><tr><th><em>p</em></th><th><em>q</em></th><th style="text-align:center;"><strong>!p</strong></th><th style="text-align:center;"><strong>!q</strong></th><th style="text-align:center;"><strong>!p &amp;&amp; !q</strong></th></tr></thead><tbody><tr><td>T</td><td>T</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td></tr><tr><td>T</td><td>F</td><td style="text-align:center;">F</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>T</td><td style="text-align:center;">T</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td></tr><tr><td>F</td><td>F</td><td style="text-align:center;">T</td><td style="text-align:center;">T</td><td style="text-align:center;">T</td></tr></tbody></table><p>Note that !(<em>p</em> || <em>q</em>) has the same truth-table results as !<em>p</em> &amp;&amp; !<em>q</em>. That means that the two statements are <em>logically equivalent</em>.</p><h2 id="operator-precedence" tabindex="-1">Operator Precedence <a class="header-anchor" href="#operator-precedence" aria-label="Permalink to &quot;Operator Precedence&quot;">​</a></h2><ul><li>Relational and logical operators are evaluated from left to right <ul><li>The associativity is left to right</li></ul></li><li>Parentheses can override precedence</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">Operators</th><th>Precedence</th></tr></thead><tbody><tr><td style="text-align:center;"><code>!</code>, <code>+</code>, <code>-</code> (unary operators)</td><td>first</td></tr><tr><td style="text-align:center;"><code>*</code>, <code>/</code>, <code>%</code></td><td>second</td></tr><tr><td style="text-align:center;"><code>+</code>, <code>-</code></td><td>third</td></tr><tr><td style="text-align:center;"><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code></td><td>fourth</td></tr><tr><td style="text-align:center;"><code>==</code>, <code>!=</code></td><td>fifth</td></tr><tr><td style="text-align:center;"><code>&amp;&amp;</code></td><td>sixth</td></tr><tr><td style="text-align:center;"><code>||</code></td><td>seventh</td></tr><tr><td style="text-align:center;"><code>=</code></td><td>last</td></tr></tbody></table><p>Try to create more advanced combinations for truth tables like:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>What does this evaluate to?</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Remember <code>false</code> is <code>0</code> and <code>true</code> is a nonzero value.</p><h2 id="short-circuit-evaluation" tabindex="-1">Short-Circuit Evaluation <a class="header-anchor" href="#short-circuit-evaluation" aria-label="Permalink to &quot;Short-Circuit Evaluation&quot;">​</a></h2><p><em>Short-circuit evaluation</em> is the evaluation of a logical expression that stops as soon as the value of the expression is known.</p><ul><li><p>Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Line 1  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Line 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Example to prevent dividing by zero.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> demon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(denom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> denom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; has the same sign as &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> denom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><details class="details custom-block"><summary>Trick, trick question: If the value of <code>num</code> is <code>0</code>, what is it after: <code>if(num &amp;&amp; num = 2) …</code>?</summary><p>Answer: <code>num</code> would still equal <code>0</code>. But it would equal <code>2</code> if you changed the <code>&amp;&amp;</code> to <code>||</code>.</p></details><h2 id="self-check-questions" tabindex="-1">Self-Check Questions <a class="header-anchor" href="#self-check-questions" aria-label="Permalink to &quot;Self-Check Questions&quot;">​</a></h2><ol><li>Be able to fill in the truth tables.</li><li>Use truth tables to determine if two expressions are logically equivalent.</li><li>Does the following expression evaluate to <code>true</code> or <code>false</code>? <ul><li><code>1 + 2 &lt; 10 || (4 * 2 != 9 &amp;&amp; -4 / 2 &lt;= -4)</code></li></ul></li></ol>`,22)]))}const y=i(d,[["render",r]]);export{m as __pageData,y as default};
