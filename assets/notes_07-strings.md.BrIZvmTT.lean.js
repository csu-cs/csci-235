import{_ as r,C as p,c as a,o as n,ag as t,j as i,a as e,G as d,w as h}from"./chunks/framework.D-HyXncD.js";const T=JSON.parse('{"title":"The string Type","description":"","frontmatter":{},"headers":[],"relativePath":"notes/07-strings.md","filePath":"notes/07-strings.md","lastUpdated":1710126512000}'),o={name:"notes/07-strings.md"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},c={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.816ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3012.6 915.9","aria-hidden":"true"};function g(E,s,u,y,m,b){const l=p("mjx-assistive-mml");return n(),a("div",null,[s[11]||(s[11]=t("",10)),i("ul",null,[i("li",null,[s[8]||(s[8]=i("p",null,[e("A string's size (the number of characters it can hold) is larger than the maximum value of an "),i("code",null,"int"),e(" or "),i("code",null,"unsigned int"),e(". Therefore, a new data type, "),i("code",null,"string::size_type"),e(", should be used.")],-1)),i("ul",null,[s[7]||(s[7]=t("",1)),i("li",null,[i("p",null,[s[2]||(s[2]=i("code",null,"string::npos",-1)),s[3]||(s[3]=e(" The maximum value of the (data) type ",-1)),s[4]||(s[4]=i("code",null,"string::size_type",-1)),s[5]||(s[5]=e(". This number is 4,294,967,295 (i.e., ",-1)),i("mjx-container",k,[(n(),a("svg",c,[...s[0]||(s[0]=[t("",1)])])),d(l,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:h(()=>[...s[1]||(s[1]=[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mn",null,"2"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"32")])]),i("mo",null,"−"),i("mn",null,"1")],-1)])]),_:1})]),s[6]||(s[6]=e(") on many machines.",-1))])])]),s[9]||(s[9]=t("",1))]),s[10]||(s[10]=t("",1))]),s[12]||(s[12]=i("div",{class:"youtube"},[i("div",null,[i("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/k_Y1vfziwxM?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1)),s[13]||(s[13]=i("h2",{id:"range-based-loops",tabindex:"-1"},[e("Range-Based Loops "),i("a",{class:"header-anchor",href:"#range-based-loops","aria-label":'Permalink to "Range-Based Loops"'},"​")],-1)),s[14]||(s[14]=i("p",null,"An easier way to iterate!",-1)),s[15]||(s[15]=i("div",{class:"youtube"},[i("div",null,[i("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/G2MM0Q74w7I?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1)),s[16]||(s[16]=t("",11))])}const v=r(o,[["render",g]]);export{T as __pageData,v as default};
