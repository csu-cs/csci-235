import{_ as o,C as h,o as t,c as n,a2 as e,j as i,a,G as r,w as p}from"./chunks/framework.DFabZJTw.js";const d="/csci-235/assets/array-of-strings.CCyi4iD-.svg",T=JSON.parse('{"title":"Arrays as Strings","description":"","frontmatter":{},"headers":[],"relativePath":"notes/08-arrays-strings.md","filePath":"notes/08-arrays-strings.md","lastUpdated":1672369588000}'),c={name:"notes/08-arrays-strings.md"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.09ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.185ex",height:"1.661ex",role:"img",focusable:"false",viewBox:"0 -694 2291.6 734","aria-hidden":"true"},u={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.09ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.185ex",height:"1.661ex",role:"img",focusable:"false",viewBox:"0 -694 2291.6 734","aria-hidden":"true"};function E(y,s,b,f,Q,F){const l=h("mjx-assistive-mml");return t(),n("div",null,[s[11]||(s[11]=e(`<h1 id="arrays-as-strings" tabindex="-1">Arrays as Strings <a class="header-anchor" href="#arrays-as-strings" aria-label="Permalink to &quot;Arrays as Strings&quot;">​</a></h1><p><em>Chapter 8</em></p><h2 id="arrays-of-strings" tabindex="-1">Arrays of Strings <a class="header-anchor" href="#arrays-of-strings" aria-label="Permalink to &quot;Arrays of Strings&quot;">​</a></h2><p>Strings in C++ can be manipulated using either the data type string or character arrays (C-strings).</p><ul><li><p>To declare an array of 100 elements of type string:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Basic operations, such as assignment, comparison, and input/output, can be performed on values of the string type.</p></li><li><p>The data in <code>list</code> can be processed just like any one-dimensional array.</p></li></ul><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Abednego&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Meshach&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shadrach&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><figure><img src="`+d+'" alt="Visualization of the array of strings declared in the code above." id="fig:2DMem"><figcaption>Visualization of the array of strings declared in the code above.</figcaption></figure><h1 id="c-strings-null-terminated-character-arrays" tabindex="-1">C-Strings (Null-Terminated Character Arrays) <a class="header-anchor" href="#c-strings-null-terminated-character-arrays" aria-label="Permalink to &quot;C-Strings (Null-Terminated Character Arrays)&quot;">​</a></h1><p>A <em>character array</em> is an array whose elements are of the <code class="cpp">char</code>.</p><p>A <em>c-string</em> is a <em>null-terminated</em> character array.</p><ul><li>Null-terminated means the last character in the array is null (i.e., the character <code class="cpp">&#39;\\0&#39;</code> or <code>0</code>).</li><li><code class="cpp">&#39;A&#39;</code> is a <code class="cpp">char</code>.</li><li><code class="cpp">&quot;A&quot;</code> is a c-string. It represents an array of two characters, <code class="cpp">&#39;A&#39;</code> and <code class="cpp">&#39;\\0&#39;</code>.</li><li><code class="cpp">char name[16];</code><br> is a character array that can hold a c-string with up to 15 characters and the null character.</li><li>Components after the null character (if any) are unused and ignored.</li><li>You do not need to have <code class="cpp">#include &lt;string&gt;</code> for c-strings.</li></ul>',11)),s[12]||(s[12]=i("div",{class:"youtube"},[i("div",null,[i("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/510w-d3NVUk?showinfo=0&rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1)),s[13]||(s[13]=e('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>The code for this video was written using <strong>Visual Studio</strong>, which is really nice IDE (integrated development environment) for Windows. It is installed on all the lab computers and the <a href="https://visualstudio.microsoft.com/vs/community/" target="_blank" rel="noreferrer">Community Edition</a> is available to download for free. <a href="./08-ide">Go here for more information.</a></p><p>As with all the example code for this class, this is standard C++ code and will work with our usual compiling process.</p></div><p>The size (or length) of an array can be omitted if the array is initialized during declaration.</p><ul><li><p><code class="cpp">char name[] = &quot;John&quot;;</code></p><ul><li>Declares an array of length 5 and stores the c-string <code class="cpp">&quot;John\\0&quot;</code> in it.</li></ul></li></ul><p>Useful string manipulation functions from the <code>cstring</code> header:</p>',4)),i("ul",null,[s[8]||(s[8]=i("li",null,[i("code",{class:"cpp"},"strcpy(char a[], char b[])"),a(" – copies a c-string (an unsafe operation, because the source array may not fit in the destination array and overflow into other memory locations)")],-1)),s[9]||(s[9]=i("li",null,[i("code",{class:"cpp"},"strncpy(char a[], char b[], int num)"),a(" – safely copies a c-string with up to num chars")],-1)),i("li",null,[s[4]||(s[4]=i("code",{class:"cpp"},"strcmp(char a[], char b[])",-1)),s[5]||(s[5]=a(" – compares c-strings, character by character. Returns 0 if the parameters are equal, < 0 if ")),i("mjx-container",k,[(t(),n("svg",g,s[0]||(s[0]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1862.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g>',1)]))),r(l,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:p(()=>s[1]||(s[1]=[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"a"),i("mo",null,"<"),i("mi",null,"b")],-1)])),_:1})]),s[6]||(s[6]=a(" and > 0 if ")),i("mjx-container",u,[(t(),n("svg",m,s[2]||(s[2]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1862.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g>',1)]))),r(l,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:p(()=>s[3]||(s[3]=[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"a"),i("mo",null,">"),i("mi",null,"b")],-1)])),_:1})]),s[7]||(s[7]=a("."))]),s[10]||(s[10]=i("li",null,[i("code",{class:"cpp"},"strlen(char a[])"),a(" – returns a c-string's length (the number of characters before "),i("code",null,"'\\0'"),a(")")],-1))]),s[14]||(s[14]=e(`<h2 id="string-comparison" tabindex="-1">String Comparison <a class="header-anchor" href="#string-comparison" aria-label="Permalink to &quot;String Comparison&quot;">​</a></h2><p>Strings are compared character by character starting from the beginning. The following are <strong>true</strong>:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Air&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Boat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Air&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;An&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Billy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="reading-and-writing-c-strings" tabindex="-1">Reading and Writing C-Strings <a class="header-anchor" href="#reading-and-writing-c-strings" aria-label="Permalink to &quot;Reading and Writing C-Strings&quot;">​</a></h2><ul><li><p>Most rules for arrays also apply to c-strings (which are null-terminated character arrays).</p><ul><li>Aggregate operations, such as assignment and comparison, are not allowed on arrays.</li><li>However, C++ does allow aggregate operations for the input and output of C-strings.</li></ul></li><li><p>Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Danger! Input could be more characters than fit in name[].</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Use <code class="cpp">cin.get()</code> is better because you can ensure that you do not overflow the array (see below for details).</p></li></ul><p>To read strings with blanks, use the <code>get</code> function:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAX_LENGTH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name[MAX_LENGTH]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // space for 15 letters + &#39;\\0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, MAX_LENGTH);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // read in up to 15 chars, stop at newline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, MAX_LENGTH, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // read in up to 15 chars, stop at blank space</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Stores the next <code>MAX_LENGTH</code> characters into <code>name</code> but the newline character is not stored in <code>name</code>.</li><li>If the string has fewer than <code>m</code> characters, reading stops at the newline character.</li><li>Add a third parameter to use a delimiter instead of a newline: <ul><li><code class="cpp">cin.get(str, MAX_LENGTH, &#39; &#39;);</code></li><li>The previous statement reads in m characters or until a blank space is reached.</li></ul></li></ul><p>To output a c-string:<br><code class="cpp">cout &lt;&lt; name;</code></p><ul><li>Outputs the content of <code>name</code> on the screen</li><li><code class="cpp">&lt;&lt;</code> continues to write the contents of <code>name</code> until it finds the null character</li><li>If <code>name</code> does not contain the null character, then the output may be strange. <ul><li>The output continues through memory adjacent to <code>name</code> until a <code class="cpp">&#39;\\0&#39;</code> is found.</li></ul></li></ul><h2 id="string-to-c-string" tabindex="-1"><code>string</code> to C-string <a class="header-anchor" href="#string-to-c-string" aria-label="Permalink to &quot;\`string\` to C-string&quot;">​</a></h2><p>String variables may hold filenames to be opened with file streams. However, conversion from strings to c-strings is helpful for other reasons.</p><p>Syntax:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strVar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Where <code>strVar</code> is a variable of type string</li></ul>`,15))])}const v=o(c,[["render",E]]);export{T as __pageData,v as default};
