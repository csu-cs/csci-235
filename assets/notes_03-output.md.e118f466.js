import{_ as o,o as i,c as l,e as a,a as e,b as t}from"./app.552fc7a3.js";const b=JSON.parse('{"title":"Output","description":"","frontmatter":{},"headers":[{"level":2,"title":"Formatting Output with Stream Manipulators","slug":"formatting-output-with-stream-manipulators","link":"#formatting-output-with-stream-manipulators","children":[]},{"level":2,"title":"Self-Check Questions","slug":"self-check-questions","link":"#self-check-questions","children":[]}],"relativePath":"notes/03-output.md","lastUpdated":1672107614000}'),s={name:"notes/03-output.md"},r=a('<h1 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-hidden="true">#</a></h1><p><em>Chapter 3</em></p><h2 id="formatting-output-with-stream-manipulators" tabindex="-1">Formatting Output with Stream Manipulators <a class="header-anchor" href="#formatting-output-with-stream-manipulators" aria-hidden="true">#</a></h2><ul><li><code>cout &lt;&lt;</code> <em>expression or manipulator</em> <code>&lt;&lt;</code> <em>expression or manipulator</em> <code>&lt;&lt; ...</code>;</li><li>Expression is evaluated</li><li>Value is printed</li><li>Manipulator is used to format the output <ul><li>Example: <code>endl</code>;</li></ul></li></ul><p><code>setprecision(n)</code> outputs decimal numbers with up to n decimal places.</p><p><code>fixed</code> outputs floating-point numbers in a fixed decimal format.</p><p><code>scientific</code> outputs floating-point numbers in scientific format.</p><p><code>showpoint</code> forces output to show the decimal point and trailing zeros.</p><p><code>setw(n)</code> outputs the value of an expression in a specified number of columns.</p><ul><li>If number of columns exceeds the number of columns required by the expression. <ul><li>The output of the expression is right-justified.</li><li>Unused columns to the left are filled with spaces</li></ul></li></ul><p><code>setfill(ch)</code> fills unused columns with a character.</p><ul><li>Example:<br><code>cout &lt;&lt; setfill(&#39;#&#39;);</code></li></ul><p>Additional formatting tools that give you more control over your output:</p><ul><li><code>left</code> and <code>right</code> manipulators</li><li><code>unsetf</code> manipulator</li></ul><p>There are two types of manipulators: (1) with parameters (<em>parametrized</em>) and (2) without parameters (<em>nonparametrized</em>)</p><ul><li><p><em>Parameterized</em> manipulators require the <code>iomanip</code> header (e.g., <code>setprecision</code>, <code>setw</code>, and <code>setfill</code>).</p></li><li><p>Nonparametrized manipulators only require the <code>iostream</code> header (e.g., <code>endl</code>, <code>fixed</code>, <code>showpoint</code>, <code>left</code>, and <code>flush</code>)</p></li></ul>',16),u=e("div",{class:"youtube"},[e("div",null,[e("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/rEZcgoMfRKg?rel=0&showinfo=0",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:"allowfullscreen"})])],-1),n=e("h2",{id:"self-check-questions",tabindex:"-1"},[t("Self-Check Questions "),e("a",{class:"header-anchor",href:"#self-check-questions","aria-hidden":"true"},"#")],-1),c=e("ol",null,[e("li",null,"What library can be used to make our command-line output look so pretty?"),e("li",null,[t("The manipulator "),e("code",null,"setprecsion()"),t(" only applies to what type of numbers?")]),e("li",null,"All the manipulators discussed apply to all the input that follows it, except for _____.")],-1),d=[r,u,n,c];function p(m,h,f,_,w,g){return i(),l("div",null,d)}const y=o(s,[["render",p]]);export{b as __pageData,y as default};
