import{_ as e,c as i,o as t,j as s,ag as l,a as n}from"./chunks/framework.D-HyXncD.js";const b=JSON.parse('{"title":"Reading from Files with Loops","description":"","frontmatter":{},"headers":[],"relativePath":"notes/05-file-loops.md","filePath":"notes/05-file-loops.md","lastUpdated":1735676685000}'),p={name:"notes/05-file-loops.md"};function r(o,a,h,d,c,k){return t(),i("div",null,[...a[0]||(a[0]=[s("h1",{id:"reading-from-files-with-loops",tabindex:"-1"},[n("Reading from Files with Loops "),s("a",{class:"header-anchor",href:"#reading-from-files-with-loops","aria-label":'Permalink to "Reading from Files with Loops"'},"​")],-1),s("p",null,"Often we don't know how much data is within a file. Therefore, we use a sentinel-controlled loop to end when we reach the end of the file (EOF).",-1),s("h2",{id:"eof-controlled-while-loop",tabindex:"-1"},[s("code",null,"EOF"),n("-Controlled While Loop "),s("a",{class:"header-anchor",href:"#eof-controlled-while-loop","aria-label":'Permalink to "`EOF`-Controlled While Loop"'},"​")],-1),s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/VW-Q3ZD_W0w?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),l(`<details class="details custom-block"><summary>This is the data file from the video, <code>data.txt</code></summary><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>43	64	28	81	71	57	52	36	72	24</span></span>
<span class="line"><span>76	11	86	89	50	54	63	1	15	71</span></span>
<span class="line"><span>42	88	33	26	99	29	37	97	73	19</span></span>
<span class="line"><span>26	52	49	50	53	76	49	62	26	94</span></span>
<span class="line"><span>1	55	29	98	1	39	6	80	37	4</span></span>
<span class="line"><span>10	39	10	94	49	13	44	36	28	50</span></span>
<span class="line"><span>1	10	84	22	78	87	76	41	15	2</span></span>
<span class="line"><span>54	43	94	45	8	46	24	72	22	82</span></span>
<span class="line"><span>20	55	80	49	73	72	33	45	16	34</span></span>
<span class="line"><span>27	96	41	37	33	66	79	67	82	25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details><p>Often, we want to read a file until we are at the end of a file (<code>EOF</code>). If you are importing from a file, there is a function called <code>eof()</code>, which returns <code>true</code> if you have reached the end of the file, and <code>false</code> otherwise. Alternatively, the input stream variable itself will return <code>true</code> if (1) you are not at end of the file and (2) you do not have an input error.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ifstream inFile;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // declare the input stream variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string word;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // variable to hold input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // open the file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // read first value (if there is a value to read)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (inFile)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // make sure the stream is good (no errors, not at EOF).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // do something with word.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // update the loop control variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// close the file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>If you use <code>eof()</code>, make sure your input file does not have a blank line of space after the last value.</p>`,4)])])}const m=e(p,[["render",r]]);export{b as __pageData,m as default};
