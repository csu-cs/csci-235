import{_ as d,C as a,o as e,c as r,k as s,a as n,H as l,w as p,Q as o}from"./chunks/framework.eb542efc.js";const m="/csci-235/assets/array-2D.bef9a0cb.svg",u="/csci-235/assets/array-2D-Memory.ade6ae5d.svg",z=JSON.parse('{"title":"Multidimensional Arrays","description":"","frontmatter":{},"headers":[],"relativePath":"notes/08-2d-arrays.md","filePath":"notes/08-2d-arrays.md","lastUpdated":1672369588000}'),b={name:"notes/08-2d-arrays.md"},h=s("h1",{id:"multidimensional-arrays",tabindex:"-1"},[n("Multidimensional Arrays "),s("a",{class:"header-anchor",href:"#multidimensional-arrays","aria-label":'Permalink to "Multidimensional Arrays"'},"​")],-1),F=s("p",null,[s("em",null,"Chapter 8")],-1),C=s("h2",{id:"two-dimensional-arrays",tabindex:"-1"},[n("Two-Dimensional Arrays "),s("a",{class:"header-anchor",href:"#two-dimensional-arrays","aria-label":'Permalink to "Two-Dimensional Arrays"'},"​")],-1),w=s("p",null,[s("em",null,"Two-dimensional array"),n(": a collection of a fixed number of elements (of the same type) arranged in two dimensions. (Sometimes called matrices or tables)")],-1),g=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/0QW9R_e_vxo?showinfo=0&rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),_=o(`<p>Declaration syntax:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dataType arrayName[intExp1][intExp2];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dataType arrayName[intExp1][intExp2];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><code>intExp1and</code> and <code>intExp2are</code> are expressions with positive integer values specifying the number of rows and columns in the array</p></li><li><p>A two-dimensional array is an array of arrays.</p></li></ul><p>Accessing elements in a two-dimensional array:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arrayName[intExp1][intExp2];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arrayName[intExp1][intExp2];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>Where <code>intExp1</code> and <code>intExp2</code> are expressions with positive integer values and specify the row and column position.</p></li><li><p>Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> matrix[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // an array with 4 rows and 6 columns</span></span>
<span class="line"><span style="color:#E1E4E8;">matrix[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25.75</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> matrix[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // an array with 4 rows and 6 columns</span></span>
<span class="line"><span style="color:#24292E;">matrix[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25.75</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><figure><img src="`+m+`" alt="Visualization of the 2D array declared in the code above." id="fig:2DDec"><figcaption>Visualization of the 2D array declared in the code above.</figcaption></figure></li><li><p>The value of <code>matrix[2]</code> is a one-dimensional array of length 6.</p></li></ul><p>Two-dimensional arrays can be initialized when they are declared:</p><ul><li><p>Elements of each row are enclosed within braces and separated by commas</p></li><li><p>All rows are enclosed within braces</p></li><li><p>For numeric arrays, unspecified elements are set to 0.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> board[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#E1E4E8;">    {  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> board[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">    {  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><p>Enumeration types can be used for array indices:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ROW_COUNT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> COLUMN_COUNT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Car</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">GM</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">FORD</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">TOYOTA</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BMW</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NISSAN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">VOLVO</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Color</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">RED</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BROWN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BLACK</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">WHITE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">GRAY</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> inStock[ROW_COUNT][COLUMN_COUNT];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">inStock[FORD][WHITE] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ROW_COUNT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> COLUMN_COUNT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">GM</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">FORD</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">TOYOTA</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BMW</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NISSAN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">VOLVO</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Color</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">RED</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BROWN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BLACK</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">WHITE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">GRAY</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> inStock[ROW_COUNT][COLUMN_COUNT];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">inStock[FORD][WHITE] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>There are two orders to process an entire two-dimensional array:</p><ol><li><em>Row processing</em>: process a single row at a time (faster)</li><li><em>Column processing</em>: process a single column at a time</li></ol><ul><li><p>Two-dimensional arrays are stored in <em>row order</em>. That means that an entire row is stored together, followed by the next row.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> board[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#E1E4E8;">    {  </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {  </span><span style="color:#9ECBFF;">&#39;X&#39;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&#39;Y&#39;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&#39;Z&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> board[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">    {  </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    {  </span><span style="color:#032F62;">&#39;X&#39;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&#39;Y&#39;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&#39;Z&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><figure><img src="`+u+`" alt="Visualization of how the 2D array declared above is ordered in computer memory. The hexadecimal numbers below each array element are memory addresses; they are all 1-byte apart because each  takes 1 byte. The out-of-bounds elements, shown in red, can be accessed by several indices; the ones shown are two examples." id="fig:2DMem"><figcaption>Visualization of how the 2D array declared above is ordered in computer memory. The hexadecimal numbers below each array element are memory addresses; they are all 1-byte apart because each <code>char</code> takes 1 byte. The out-of-bounds elements, shown in red, can be accessed by several indices; the ones shown are two examples.</figcaption></figure><ul><li>Each row of a two-dimensional array is a one-dimensional array.</li><li>To process, use algorithms like those for processing one-dimensional arrays.</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><ul><li><p>Initialization Examples:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> matrix[ROW_COUNT][COLUMN_COUNT];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize all of row 3 to zeros.</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; col </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> COLUMN_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">col)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    matrix[row][col] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize the whole array to zeros in **row order**</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; row </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ROW_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">row)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; col </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> COLUMN_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">col)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        matrix[row][col] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> matrix[ROW_COUNT][COLUMN_COUNT];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize all of row 3 to zeros.</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; col </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> COLUMN_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">col)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    matrix[row][col] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize the whole array to zeros in **row order**</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; row </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ROW_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">row)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; col </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> COLUMN_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">col)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        matrix[row][col] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>The end of initializing an array in column order is the same as the previous method above. However, the column-order method shown below is a <em>poor design</em> that will likely finish more slowly. Use row order whenever practical because that is how the array is laid out in memory.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"> // Poor Design: Initialize the whole array to zeros in **column order**</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; col </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> COLUMN_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">col)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; row </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ROW_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">row)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        matrix[row][col] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"> // Poor Design: Initialize the whole array to zeros in **column order**</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; col </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> COLUMN_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">col)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; row </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ROW_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">row)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        matrix[row][col] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>Displaying an array in a table:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; row </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ROW_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">row)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; col </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> COLUMN_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">col)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setw</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> matrix[row][col];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; row </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ROW_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">row)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; col </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> COLUMN_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">col)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setw</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> matrix[row][col];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>Input Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; row </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ROW_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">row)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; col </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> COLUMN_COUNT; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">col)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cin </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> matrix[row][col];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; row </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ROW_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">row)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; col </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> COLUMN_COUNT; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">col)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> matrix[row][col];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="passing-two-dimensional-arrays-as-parameters-to-functions" tabindex="-1">Passing Two-Dimensional Arrays as Parameters to Functions <a class="header-anchor" href="#passing-two-dimensional-arrays-as-parameters-to-functions" aria-label="Permalink to &quot;Passing Two-Dimensional Arrays as Parameters to Functions&quot;">​</a></h2><p>Multidimensional arrays are passed by reference as parameters to a function.</p>`,19),A=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/U1effjh6cLk?showinfo=0&rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),D=o(`<ul><li><p>The base address is passed as the actual parameter.</p></li><li><p>When declaring a two-dimensional array as a formal parameter, the size of the first dimension can be omitted, but not the second.</p></li><li><p>For example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Number of columns in the 2D arrays</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> COLUMN_COUNT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// The column count is fixed but the function accepts an array with </span></span>
<span class="line"><span style="color:#6A737D;">// any number of rows.</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMatrix</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">matrix</span><span style="color:#E1E4E8;">[][COLUMN_COUNT], </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">rowCount</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> array[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">][COLUMN_COUNT] {};</span><span style="color:#6A737D;"> // 5x4 array initialized to 0&#39;s.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printMatrix</span><span style="color:#E1E4E8;">(array, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Number of columns in the 2D arrays</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> COLUMN_COUNT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// The column count is fixed but the function accepts an array with </span></span>
<span class="line"><span style="color:#6A737D;">// any number of rows.</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMatrix</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">matrix</span><span style="color:#24292E;">[][COLUMN_COUNT], </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rowCount</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> array[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">][COLUMN_COUNT] {};</span><span style="color:#6A737D;"> // 5x4 array initialized to 0&#39;s.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printMatrix</span><span style="color:#24292E;">(array, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h1 id="n-dimensional-arrays" tabindex="-1"><em>n</em>-Dimensional Arrays <a class="header-anchor" href="#n-dimensional-arrays" aria-label="Permalink to &quot;*n*-Dimensional Arrays&quot;">​</a></h1>`,2),v=s("em",null,"n-dimensional array",-1),T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.506ex",height:"1.819ex",role:"img",focusable:"false",viewBox:"0 -666 2433.6 804","aria-hidden":"true"},x=o('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),O=[x],N=s("p",null,[n("Declaration syntax:"),s("br"),s("code",{class:"cpp"},"dataType arrayName[intExp1][intExp2]...[intExpN];")],-1),B=s("p",null,[n("To access an element:"),s("br"),s("code",{class:"cpp"},"arrayName[intExp1][intExp2]...[intExpN];")],-1);function k(U,Q,M,L,R,W){const t=a("mi"),c=a("mo"),i=a("mn"),y=a("math"),E=a("mjx-assistive-mml");return e(),r("div",null,[h,F,C,w,g,_,A,D,s("p",null,[v,n(": a collection of a fixed number of elements arranged in n dimensions ("),s("mjx-container",T,[(e(),r("svg",f,O)),l(E,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:p(()=>[l(y,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:p(()=>[l(t,null,{default:p(()=>[n("n")]),_:1}),l(c,null,{default:p(()=>[n("≥")]),_:1}),l(i,null,{default:p(()=>[n("1")]),_:1})]),_:1})]),_:1})]),n(")")]),N,B])}const S=d(b,[["render",k]]);export{z as __pageData,S as default};
