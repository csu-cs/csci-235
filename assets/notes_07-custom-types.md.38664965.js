import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.eb542efc.js";const m=JSON.parse('{"title":"Custom Types","description":"","frontmatter":{},"headers":[],"relativePath":"notes/07-custom-types.md","filePath":"notes/07-custom-types.md","lastUpdated":1672203699000}'),p={name:"notes/07-custom-types.md"},l=e(`<h1 id="custom-types" tabindex="-1">Custom Types <a class="header-anchor" href="#custom-types" aria-label="Permalink to &quot;Custom Types&quot;">​</a></h1><p><em>Chapter 7</em></p><h2 id="type-aliasing" tabindex="-1">Type Aliasing <a class="header-anchor" href="#type-aliasing" aria-label="Permalink to &quot;Type Aliasing&quot;">​</a></h2><p>We can create new names for existing types with the keyword <code>using</code> or <code>typedef</code>.</p><ul><li><p>Syntax (two options):</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> existingTypeName newTypeName;</span><span style="color:#6A737D;"> // traditional method</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newTypeName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">existingTypeName</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // preferred in the new standard</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> existingTypeName newTypeName;</span><span style="color:#6A737D;"> // traditional method</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newTypeName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">existingTypeName</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // preferred in the new standard</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>An example that creates a new name, <code>Number</code>, for the <code>int</code> type.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // Create a new name for the int type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> Number MAX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // Define a new const int using the new type name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // Create a new name for the int type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Number MAX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // Define a new const int using the new type name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>These statements do NOT create any new data types. They create only aliases to existing types.</p></li></ul><h2 id="auto-variable-types" tabindex="-1">Auto Variable Types <a class="header-anchor" href="#auto-variable-types" aria-label="Permalink to &quot;Auto Variable Types&quot;">​</a></h2><p>C++11 and beyond allow auto declaration of variables.</p><ul><li><p>Data type does not need to be specified when initializing a variable at declaration.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">   // num1 is an int because 15 is an int.</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15.0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // num2 is a double</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // num3 is a char</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num1;</span><span style="color:#6A737D;"> // num4 is an int</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">   // num1 is an int because 15 is an int.</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15.0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // num2 is a double</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  // num3 is a char</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num1;</span><span style="color:#6A737D;"> // num4 is an int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>The <code>auto</code> keyword is a placeholder for a type, but it is not itself a type. The compiler determines the type based on the value it receives.</p></li><li><p>There is no conversion between types, so your code is not only more flexible but more efficient.</p></li><li><p>The variable <strong>must</strong> be initialized at declaration. For example, the following code will not compile.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> value;</span><span style="color:#6A737D;"> // compiler error</span></span>
<span class="line"><span style="color:#E1E4E8;">value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Test&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> value;</span><span style="color:#6A737D;"> // compiler error</span></span>
<span class="line"><span style="color:#24292E;">value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Test&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul>`,8),o=[l];function t(r,c,i,y,d,u){return a(),n("div",null,o)}const h=s(p,[["render",t]]);export{m as __pageData,h as default};
