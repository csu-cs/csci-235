import{_ as n,o as a,c as o,Q as l,k as s,a as e}from"./chunks/framework.eb542efc.js";const v=JSON.parse('{"title":"Random Number Generation","description":"","frontmatter":{},"headers":[],"relativePath":"notes/05-random-numbers.md","filePath":"notes/05-random-numbers.md","lastUpdated":1677291250000}'),t={name:"notes/05-random-numbers.md"},r=l('<h1 id="random-number-generation" tabindex="-1">Random Number Generation <a class="header-anchor" href="#random-number-generation" aria-label="Permalink to &quot;Random Number Generation&quot;">​</a></h1><p><em>Chapter 5</em></p><p>The header file <code>cstdlib</code> contains a the <code>rand()</code> function which returns a <em>pseudorandom</em> number (i.e., a seemingly random number).</p><ul><li><code>rand()</code> returns an <code>int</code> value between <code>0</code> and <code>RAND_MAX</code> (often <code>32767</code>).</li><li>Examples:<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rand</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#6A737D;"> // a &quot;random&quot; integer &gt;= 0 and &lt; 100`</span></span>\n<span class="line"><span style="color:#B392F0;">rand</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">900</span><span style="color:#6A737D;"> // a &quot;random&quot;  between 900 and 999 inclusive`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rand</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#6A737D;"> // a &quot;random&quot; integer &gt;= 0 and &lt; 100`</span></span>\n<span class="line"><span style="color:#6F42C1;">rand</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">900</span><span style="color:#6A737D;"> // a &quot;random&quot;  between 900 and 999 inclusive`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><code>srand()</code> seeds the random number generator. It accepts 1 parameter, an <code>unsigned int</code>, which determines the set of random numbers to be returned by <code>rand()</code>. <ul><li>Commonly the time is used to seed the random number generator. That way you have a different seed every time the program executes.<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> SEED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">time</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#B392F0;">srand</span><span style="color:#E1E4E8;">(SEED);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> SEED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#6F42C1;">srand</span><span style="color:#24292E;">(SEED);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>Generally, you should only call <code>srand()</code> once in your code so the numbers appear to be more random.</li></ul></li></ul><hr><p>This is a fun example that I think will help solidify some concepts for you. Also, it shows how you can use pseudo-random numbers to create a game.</p>',6),p=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/_VkEnualCV8?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),c=s("p",null,[e("“The lot is cast into the lap, but its every decision is from the LORD.” - "),s("a",{href:"https://www.biblegateway.com/passage/?search=Proverbs+16%3A33&version=ESV",target:"_blank",rel:"noreferrer"},"Proverbs 16:33 (ESV)")],-1),d=s("ul",null,[s("li",null,[e("Random just means "),s("em",null,"WE"),e(" cannot predict the outcome.")])],-1),i=[r,p,c,d];function u(m,y,E,h,b,_){return a(),o("div",null,i)}const f=n(t,[["render",u]]);export{v as __pageData,f as default};
