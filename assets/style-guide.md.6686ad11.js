import{_ as s,o as n,c as a,e}from"./app.89da3af6.js";const F=JSON.parse('{"title":"C++ Style Guide","description":"","frontmatter":{"title":"C++ Style Guide","lastUpdated":true},"headers":[{"level":2,"title":"General Guidelines","slug":"general-guidelines","link":"#general-guidelines","children":[]},{"level":2,"title":"File Names","slug":"file-names","link":"#file-names","children":[]},{"level":2,"title":"Comment","slug":"comment","link":"#comment","children":[{"level":3,"title":"Program Description","slug":"program-description","link":"#program-description","children":[]},{"level":3,"title":"Commenting Blocks of Code","slug":"commenting-blocks-of-code","link":"#commenting-blocks-of-code","children":[]},{"level":3,"title":"Control-Structure Comments","slug":"control-structure-comments","link":"#control-structure-comments","children":[]},{"level":3,"title":"Function Prototype Comments","slug":"function-prototype-comments","link":"#function-prototype-comments","children":[]},{"level":3,"title":"Commenting Out Code","slug":"commenting-out-code","link":"#commenting-out-code","children":[]}]},{"level":2,"title":"Whitespace and Indentation","slug":"whitespace-and-indentation","link":"#whitespace-and-indentation","children":[{"level":3,"title":"Indentation","slug":"indentation","link":"#indentation","children":[]},{"level":3,"title":"New Lines","slug":"new-lines","link":"#new-lines","children":[]},{"level":3,"title":"Long Lines","slug":"long-lines","link":"#long-lines","children":[]}]},{"level":2,"title":"Variables and Constants","slug":"variables-and-constants","link":"#variables-and-constants","children":[{"level":3,"title":"Identifiers","slug":"identifiers","link":"#identifiers","children":[]}]},{"level":2,"title":"Conditions","slug":"conditions","link":"#conditions","children":[]},{"level":2,"title":"Switches","slug":"switches","link":"#switches","children":[]},{"level":2,"title":"Loops","slug":"loops","link":"#loops","children":[]},{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[{"level":3,"title":"Function Prototype Comments","slug":"function-prototype-comments-1","link":"#function-prototype-comments-1","children":[]}]},{"level":2,"title":"Enums and Structs","slug":"enums-and-structs","link":"#enums-and-structs","children":[]},{"level":2,"title":"Platform Specific Code","slug":"platform-specific-code","link":"#platform-specific-code","children":[{"level":3,"title":"Avoid System Calls","slug":"avoid-system-calls","link":"#avoid-system-calls","children":[]},{"level":3,"title":"Non-standard libraries / includes","slug":"non-standard-libraries-includes","link":"#non-standard-libraries-includes","children":[]}]},{"level":2,"title":"Other","slug":"other","link":"#other","children":[]}],"relativePath":"style-guide.md","lastUpdated":1671816034000}'),l={name:"style-guide.md"},p=e(`<h1 id="c-style-guide" tabindex="-1">C++ Style Guide <a class="header-anchor" href="#c-style-guide" aria-hidden="true">#</a></h1><p>Each coding assignment must follow this standard. Using one style consistently throughout the source code lets us focus on other (more important) issues.</p><p>There’s no one, right way to write code. But there are definitely a lot of wrong (or, at least, bad) ways. Certainly it is possible to write “correct” code that violates the guidelines below. Even so, we ask that you adhere to these conventions for CSCI 235 to motivate consistency and readability in your personal coding style.</p><p>Companies typically adopt their own, company-wide conventions for style. Learning to carefully obey a style guide, and writing code with a group of other developers where the style is consistent among them, are valuable job skills.</p><hr><nav class="table-of-contents"><ul><li><a href="#general-guidelines">General Guidelines</a></li><li><a href="#file-names">File Names</a></li><li><a href="#comment">Comment</a><ul><li><a href="#program-description">Program Description</a></li><li><a href="#commenting-blocks-of-code">Commenting Blocks of Code</a></li><li><a href="#control-structure-comments">Control-Structure Comments</a></li><li><a href="#function-prototype-comments">Function Prototype Comments</a></li><li><a href="#commenting-out-code">Commenting Out Code</a></li></ul></li><li><a href="#whitespace-and-indentation">Whitespace and Indentation</a><ul><li><a href="#indentation">Indentation</a></li><li><a href="#new-lines">New Lines</a></li><li><a href="#long-lines">Long Lines</a></li></ul></li><li><a href="#variables-and-constants">Variables and Constants</a><ul><li><a href="#identifiers">Identifiers</a></li></ul></li><li><a href="#conditions">Conditions</a></li><li><a href="#switches">Switches</a></li><li><a href="#loops">Loops</a></li><li><a href="#functions">Functions</a><ul><li><a href="#function-prototype-comments-1">Function Prototype Comments</a></li></ul></li><li><a href="#enums-and-structs">Enums and Structs</a></li><li><a href="#platform-specific-code">Platform Specific Code</a><ul><li><a href="#avoid-system-calls">Avoid System Calls</a></li><li><a href="#non-standard-libraries-includes">Non-standard libraries / includes</a></li></ul></li><li><a href="#other">Other</a></li></ul></nav><h2 id="general-guidelines" tabindex="-1">General Guidelines <a class="header-anchor" href="#general-guidelines" aria-hidden="true">#</a></h2><ul><li>All code should compile with the <code>-Wextra</code> parameter without warnings.</li><li><strong>No</strong> non-constant global variables.</li></ul><h2 id="file-names" tabindex="-1">File Names <a class="header-anchor" href="#file-names" aria-hidden="true">#</a></h2><p>All C++ source code files need to end in .cpp. Additionally, they should only contain letters, numbers, and underscores (no spaces) and they should <strong>NOT</strong> start with a number (start filenames with a letter).</p><p>The following are good filenames:</p><ul><li><code>launchSequence.cpp</code></li><li><code>self_destuct.cpp</code></li><li><code>Assignment02_P1.cpp</code></li></ul><p>The following are BAD filenames:</p><ul><li><code>launch sequence.cpp</code> (contains a space)</li><li><code>self_destuct</code> (does not have the .cpp extension)</li><li><code>02Problem1.cpp</code> (starts with a number)</li><li><code>Assignment02.1.cpp</code> (contains a period before <code>.cpp</code>)</li><li><code>AutoTuner.cpp.cpp</code> (contains a period before the extension)</li></ul><h2 id="comment" tabindex="-1">Comment <a class="header-anchor" href="#comment" aria-hidden="true">#</a></h2><p>Use the <code>/* */</code> syntax for multi-line comments and <code>//</code> for single-line comments.</p><h3 id="program-description" tabindex="-1">Program Description <a class="header-anchor" href="#program-description" aria-hidden="true">#</a></h3><p>Atop each file, include a commented header with a brief description of the program or file and the programmer&#39;s name. Write the description in your own words.</p><p>For example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Simulates the count to launch an Apollo rocket. The countdown starts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * at 10 and continues down to 0 (takeoff). This includes the main-</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * engine start at T-6.6 seconds.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * by Dr. Hayes</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="commenting-blocks-of-code" tabindex="-1">Commenting Blocks of Code <a class="header-anchor" href="#commenting-blocks-of-code" aria-hidden="true">#</a></h3><p>Comments should be present throughout your code. They make code more readable, not only for others like your instructor but also for you.</p><p>Good example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> TEMP_RATIO </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9.0</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // ratio of Celsius to Fahrenheit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// convert Fahrenheit to Celsius</span></span>
<span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> celsius </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TEMP_RATIO </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fahr </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Place comments their own line(s), preceding whatever you are explaining, or on the same line (if it is very brief), but <strong>not</strong> or next line. In other words, <strong>don&#39;t</strong> do this:</p><p>Bad example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> celsius </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TEMP_RATIO </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fahr </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// convert Fahrenheit to Celsius</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><em>How much and how often to comment?</em> Commenting too little is bad. Commenting too much is bad. Commenting every few lines of code (i.e., interesting blocks) that actually do something is a decent rule of thumb. Put a comment above every code block (e.g., above if statements, loops, etc.). Also, try to write comments that explain the meaning of non-obvious code and describe why you implemented a block in a certain way. Keep comments short (try to keep them to 1 line each, unless you are explaining something complex).</p><h3 id="control-structure-comments" tabindex="-1">Control-Structure Comments <a class="header-anchor" href="#control-structure-comments" aria-hidden="true">#</a></h3><p>Each control structure (if...else, switch statement, loop, etc.) should be directly preceded by a comment.</p><p>Good example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// If we find a lowercase letter, capitalize it.</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">letter </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> letter </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">z</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    letter </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="function-prototype-comments" tabindex="-1">Function Prototype Comments <a class="header-anchor" href="#function-prototype-comments" aria-hidden="true">#</a></h3><p>Each function created by you (except <code>main()</code>) should have an comment above its declaration (prototype). More on this in the <a href="#functions">Functions section</a>.</p><p>Comments need to be in the bodies of every multi-line function, not just <code>main()</code>.</p><h3 id="commenting-out-code" tabindex="-1">Commenting Out Code <a class="header-anchor" href="#commenting-out-code" aria-hidden="true">#</a></h3><p>When working on code, programmers tend to &quot;comment out&quot; lines of code to exclude them from the program without deleting them. It&#39;s fine to do this while you work on your program, but it is considered bad style to turn in a file with blocks of code commented out. If the program is done and such code is not needed, just remove it.</p><h2 id="whitespace-and-indentation" tabindex="-1">Whitespace and Indentation <a class="header-anchor" href="#whitespace-and-indentation" aria-hidden="true">#</a></h2><p>Use a single space between operators and their operands:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-gfrQJ" id="tab-qC6ygo3" checked="checked"><label for="tab-qC6ygo3">Good Example</label><input type="radio" name="group-gfrQJ" id="tab-6EGYvFC"><label for="tab-6EGYvFC">Bad Example</label></div><div class="blocks"><div class="language-cpp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">point1 </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> point2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> unit </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> time </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">random</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">+=(</span><span style="color:#A6ACCD;">point1</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">point2</span><span style="color:#89DDFF;">)*</span><span style="color:#A6ACCD;">unit</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">random</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h3 id="indentation" tabindex="-1">Indentation <a class="header-anchor" href="#indentation" aria-hidden="true">#</a></h3><p>Indent your code with one hard tabs (or four spaces) at a time to make clear which blocks of code are inside of others.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use your keyboard&#39;s Tab key to do so, be sure that your text editor is configured to convert tabs (<code>&#39;\\t&#39;</code>) to an actual tab (i.e. a hard tab) or four spaces, else your code may not print or display properly on someone else&#39;s computer. The tab key renders differently in different editors.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In Visual Studio Code, take a look at the blue status bar at the bottom. To the right, you will see &quot;Spaces: &quot; or &quot;Tab-Size&quot;, which indicates if you are indenting with &amp; number of spaces or with tabs receptively.</p></div><ul><li><p>Increase your indentation by one increment on each curly brace <code>{</code>, and decrease it once on each closing brace <code>}</code>.</p></li><li><p>Place a line break after every <code>{</code> .</p></li></ul><p>Here are examples of well-indented code and bad indentation:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-t2ja7" id="tab-IqF9axE" checked="checked"><label for="tab-IqF9axE">Good Example</label><input type="radio" name="group-t2ja7" id="tab-o36fVyR"><label for="tab-o36fVyR">Bad Example</label></div><div class="blocks"><div class="language-cpp active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The value is positive.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // Display 3 stars</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> iter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> iter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> iter</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">xval </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The value is positive.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Display 3 stars</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> iter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> iter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> iter</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>Visual Studio Code</strong> will automatically re-indent select code if you press <code>Shift + Alt + F</code> on Windows or <code>Shift + Option + F</code> on macOS.<br><strong>Xcode</strong> will automatically re-indent selected code if you press <code>Control + I</code> (or choose <strong>Editor &gt; Structure &gt; Re-Indent</strong> from the file menu).</p></div><h3 id="new-lines" tabindex="-1">New Lines <a class="header-anchor" href="#new-lines" aria-hidden="true">#</a></h3><p>Always put a newline after a semicolon (we&#39;ll talk about one exception to the rule when we get to for loops).</p><p>Bad:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> weight</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> string name</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Enter your age: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Get the user&#39;s age  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Good:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Get the user&#39;s age</span></span>
<span class="line"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Enter your age: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Do not place more than one statement on the same line.</p><p>Nothing goes on the same line after an opening curly brace (<code>{</code>).<br> Noting goes on the same line before a closing curly brace (<code>}</code>).</p><p>Bad:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line highlighted error"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Good:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="long-lines" tabindex="-1">Long Lines <a class="header-anchor" href="#long-lines" aria-hidden="true">#</a></h3><p>If a statement is really long (more than 80 characters), split the statement into multiple lines, with each subsequent line indented.</p><p>This is bad:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is a really long line </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> denom </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> and more text.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This is how the previous line should look:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is a really long line </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> denom </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> and more text.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Good example of a function prototype:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reallyLongFunctionName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">with</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">lots</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">of</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">parameters</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To add a line to Visual Studio Code indicating the 80 character mark, go to <strong>File &gt; Preferences &gt; User/Workspace settings</strong> Add this line to your custom settings on the right: <code>&quot;editor.rulers&quot;: [80],</code></p></div><h2 id="variables-and-constants" tabindex="-1">Variables and Constants <a class="header-anchor" href="#variables-and-constants" aria-hidden="true">#</a></h2><h3 id="identifiers" tabindex="-1">Identifiers <a class="header-anchor" href="#identifiers" aria-hidden="true">#</a></h3><p>In programming languages, names you give to things are called <em>identifiers</em>.</p><ul><li><p>Identifiers should be meaningful, such as <code>numberOfGames</code>. Identifiers like <code>herp</code> and <code>derp</code> are funny, but not helpful.</p></li><li><p>A single letter cannot be a descriptive identifier. Avoid even the commonly used loop variables like <code>i</code> and <code>j</code>. Good alternatives are <code>index</code> or <code>iter</code>.</p><p>Bad example names:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> clr lineW</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Good example names:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> xCoord</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> yCoord</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> color</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  lineWidth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Unless constant or a new data type (see below), all identifiers should start with a lowercase letter and each subsequent word should start with a capital letter (i,e., camel case).</p><p>Bad examples:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> Time</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // Should start with a lowercase letter. </span></span>
<span class="line highlighted error"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> percent_increase</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // Should be camel case. </span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">string FirstName</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // should start with a lowercase latter. </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Good examples:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> percentIncrease</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">string firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h4 id="naming-constants" tabindex="-1">Naming Constants <a class="header-anchor" href="#naming-constants" aria-hidden="true">#</a></h4><p>Constants should be named in all caps with each word separated by an underscore (<code>_</code>).</p><p>Good examples:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> PI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.14159</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> INCH_TO_CM </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.54</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> CM_TO_INCH </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> INCH_TO_CM</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> MAX_SCORE </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="variable-declaration-and-assignment" tabindex="-1">Variable Declaration and Assignment <a class="header-anchor" href="#variable-declaration-and-assignment" aria-hidden="true">#</a></h4><ul><li><p>Declare variables in the smallest scope possible.</p></li><li><p>Choose appropriate data types for your variables. If a given variable can store only integers, give it type <code>int</code> rather than <code>double</code>. If a variable stores characters, make it a <code>char</code> instead of an <code>int</code>.</p></li><li><p>Never use <code>0</code> and <code>1</code> with <code>bool</code> variables. <code>true</code> and <code>false</code> exist for a reason.</p></li><li><p>Initialize variables at declaration when appropriate:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>In other words, don&#39;t do this:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>If a variable&#39;s value doesn&#39;t change throughout the code, it should be declared as a constant and be named in all caps <code>LIKE_THIS</code>:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> NUMBER_OF_PROJECTS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="global-variables-and-magic-numbers" tabindex="-1">Global Variables and &quot;Magic&quot; Numbers <a class="header-anchor" href="#global-variables-and-magic-numbers" aria-hidden="true">#</a></h4><ul><li><p>Non-constant global variables (those declared outside of functions, including <code>main()</code>) must never be used. They lead to unintentional bugs and often caused by poor design. Instead, you should be passing variables via functions.</p></li><li><p>Global constants are acceptable when needed.</p></li><li><p><a href="https://thedailywtf.com/articles/Magic-Number-7" title="More on Magic Numbers." target="_blank" rel="noreferrer"><strong>Magic numbers</strong></a> are seemingly random constants within your program, numbers whose appearance in code isn&#39;t clear from the outset. You should avoid magic numbers at all costs. Fortunately, C++ provides us with an easy way to do so by storing such numbers in constants. So, don&#39;t write:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> area </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.141592</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> radius </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> radius</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // Magic number! </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Instead, store the number in a constant:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> PI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.141592</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> area </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> PI </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> radius </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> radius</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>However, don&#39;t just restate the value with your identifiers:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> TWO </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> TWO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This adds no meaning to your code.</p><p>The reason is that we want to make it clear both to the compiler and to readers of the program that this quantity can&#39;t be changed. The compiler can often produce better machine code with that knowledge. And the reader gets a more precise understanding of the program&#39;s behavior. Moreover, if the programmer (you!) decides to ever change that value, he or she will have do that just in one place!</p></li></ul><h2 id="conditions" tabindex="-1">Conditions <a class="header-anchor" href="#conditions" aria-hidden="true">#</a></h2><ul><li><p>Always use curly braces (even when not necessary) and use consistent brace style. In other words, do this:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> is positive.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>But avoid doing this:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> is positive.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>and</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> is positive.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted error"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>Don&#39;t ever test whether a <code>bool</code> value is <code>==</code> or <code>!=</code> to <code>true</code> or <code>false</code>. Don&#39;t do</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">isValid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>or</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">isValid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false)</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Do check if a variable is <code>true</code> or <code>false</code> as in:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">isValid</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>or</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">isValid</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>If you have an if/else statement that returns a <code>bool</code> value based on a test, such as this one:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">score1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> score2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>simplify it with a single statement that just directly returns the test&#39;s result:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> score1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> score2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="switches" tabindex="-1">Switches <a class="header-anchor" href="#switches" aria-hidden="true">#</a></h2><p>Indent your switch statements like this:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">:</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value is -1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">:</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value is 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;">:</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value is neither -1 nor 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-hidden="true">#</a></h2><ul><li><p>Whenever you a counting variable, use more specific names than <code>i</code>, <code>j</code>, ....</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> rowIter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> rowIter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> rowCount</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> rowIter</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> colIter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> colIter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> colCount</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> colIter</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // do something</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>If you find yourself in need of more than three levels of nested loops, you should reconsider your design!</p></li><li><p>A <code>for</code> loop should look like the one above, while a <code>while</code> loop should resemble this one below:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>Avoid <code>break</code> statements and never use <code>continue</code> statements in loops. Loops should be controlled by a condition and should terminate when that condition is met. Generally, <code>break</code> should only be used inside of a <code>switch</code>.</p></li><li><p>Never write endless loops, such as <code>while (true)</code>.</p></li><li><p>Use a <code>for</code> loop when the number of repetitions is known (definite); use a <code>while</code> loop when the number of repetitions is unknown (indefinite).</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// repeat exactly size times</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> iter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> iter </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> iter</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // do something</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// repeat until a valid number is entered.</span></span>
<span class="line"><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">cin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Handle input error and get next input here.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><p>Like non-constant variables, function names should be camel case (i.e., start with a lowercase letter and each subsequent word should start with a capital letter).</p><p>Value-returning functions should be named after what they return and void functions after what they do.</p><p>Good examples:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isPrime</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">displayStats</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">average</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">median</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">min</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">max</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spinSpinner</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">numberOfTurns</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Always include function prototypes before the <code>main()</code> function and function definitions below <code>main()</code></p><p>Every function should except <code>main()</code> should have function prototype that is declared before <code>main()</code>. Function definitions should be defined below <code>main()</code>.</p><h3 id="function-prototype-comments-1" tabindex="-1">Function Prototype Comments <a class="header-anchor" href="#function-prototype-comments-1" aria-hidden="true">#</a></h3><p>Each function <strong>prototype</strong> should be directly preceded by a comment describing what the function does and how to use (call) it. The <code class="language-cpp">main()</code> function does not need a comment directly above it because it is not a prototype and the comment at the top of the file already explains what the program does. Of course, you should always include comments inside of the function body.</p><p>Good example:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * A function that draws a spinning animation</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">numberOfTurns</span><span style="color:#676E95;font-style:italic;"> the number of times the spinner spins.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spinSpinner</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">numberOfTurns</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="function-decomposition" tabindex="-1">Function Decomposition <a class="header-anchor" href="#function-decomposition" aria-hidden="true">#</a></h4><ul><li><p>Often you might find yourself writing similar blocks of code. Utilize functions to decompose your program and minimize redundancy in code.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your first name?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your last name?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your email?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> email</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>Instead create and use helper functions that incorporate the common functionality:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInfo</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your first name?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInfo</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your last name?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">email </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInfo</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your email?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInfo</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prompt</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> prompt </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        string input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>If you have a single function that is very long, break it apart into smaller sub-functions. The definition of &quot;very long&quot; is vague, but let&#39;s say a function longer than 40-50 lines is pushing it. If you try to describe the function&#39;s purpose and find yourself using the word &quot;and&quot; a lot, that probably means the function does too many things and should be split into sub-functions.</p></li></ul><h2 id="enums-and-structs" tabindex="-1">Enums and Structs <a class="header-anchor" href="#enums-and-structs" aria-hidden="true">#</a></h2><ul><li>Use <code>PascalCase</code> for enum, struct, and class names. (Notice how the first letter is capitalized.)</li><li>A comment should directly precede each enum or struct declaration describing the purpose of the data type.</li><li>The values an enum should named in all caps with each word separated by an underscore (<code>_</code>). See the standard for <a href="#naming-constants">naming constants</a>.</li></ul><h2 id="platform-specific-code" tabindex="-1">Platform Specific Code <a class="header-anchor" href="#platform-specific-code" aria-hidden="true">#</a></h2><p>All programs should compile and run on any system. We want our code to be &quot;portable&quot;, meaning able to be compiled and run on multiple systems.</p><h3 id="avoid-system-calls" tabindex="-1">Avoid System Calls <a class="header-anchor" href="#avoid-system-calls" aria-hidden="true">#</a></h3><p>A system call is when your program calls another program on the system. In C++ this is commonly done through a function called <code>system()</code>. These calls are tempting, because they provide additional features to your program without having to learn the programming to do them.</p><p>Bad:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#82AAFF;">system</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">PAUSE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Windows only way to pause execution.  </span></span>
<span class="line highlighted error"><span style="color:#82AAFF;">system</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CLS</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Windows only way to clear the screen.  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Good example to pause execution using C++</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Press enter to continue . . .</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">cin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ignore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INT_MAX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // ignore everything typed until user hits enter.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="non-standard-libraries-includes" tabindex="-1">Non-standard libraries / includes <a class="header-anchor" href="#non-standard-libraries-includes" aria-hidden="true">#</a></h3><p>Avoid the user of operating system specific libraries. We want code that compiles on all operating systems.</p><p>Example of Bad Code:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted error"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">windows.h</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Use of following standard libraries is encourage:</p><ul><li><a href="https://en.cppreference.com/w/cpp/header/cassert" target="_blank" rel="noreferrer">cassert</a></li><li><a href="https://en.cppreference.com/w/cpp/header/cctype" target="_blank" rel="noreferrer">cctype</a></li><li><a href="https://en.cppreference.com/w/cpp/header/cfloat" target="_blank" rel="noreferrer">cfloat</a></li><li><a href="https://en.cppreference.com/w/cpp/chrono" target="_blank" rel="noreferrer">chrono</a></li><li><a href="https://en.cppreference.com/w/cpp/header/climits" target="_blank" rel="noreferrer">climits</a></li><li><a href="https://en.cppreference.com/w/cpp/header/cmath" target="_blank" rel="noreferrer">cmath</a></li><li><a href="https://en.cppreference.com/w/cpp/header/cstddef" target="_blank" rel="noreferrer">cstddef</a></li><li><a href="https://en.cppreference.com/w/cpp/header/cstdlib" target="_blank" rel="noreferrer">cstdlib</a></li><li><a href="https://en.cppreference.com/w/cpp/header/cstring" target="_blank" rel="noreferrer">cstring</a></li><li><a href="https://en.cppreference.com/w/cpp/header/ctime" target="_blank" rel="noreferrer">ctime</a></li><li><a href="https://en.cppreference.com/w/cpp/header/fstream" target="_blank" rel="noreferrer">fstream</a></li><li><a href="https://en.cppreference.com/w/cpp/header/string" target="_blank" rel="noreferrer">string</a></li><li><a href="https://en.cppreference.com/w/cpp/header/iostream" target="_blank" rel="noreferrer">iostream</a></li><li><a href="https://en.cppreference.com/w/cpp/header/iomanip" target="_blank" rel="noreferrer">iomanip</a></li><li><a href="https://en.cppreference.com/w/cpp/header/ostream" target="_blank" rel="noreferrer">ostream</a></li><li><a href="https://en.cppreference.com/w/cpp/header/random" target="_blank" rel="noreferrer">random</a></li><li><a href="https://en.cppreference.com/w/cpp/header/span" target="_blank" rel="noreferrer">span</a></li><li><a href="https://en.cppreference.com/w/cpp/header/thread" target="_blank" rel="noreferrer">thread</a></li></ul><h2 id="other" tabindex="-1">Other <a class="header-anchor" href="#other" aria-hidden="true">#</a></h2><ul><li>C++ contains an <code>exit()</code> function that immediately exits your entire program. You should <strong>never</strong> call this function in this course. Your program should always exit naturally by reaching the end of your <code>main</code> function and returning.</li><li>Never use <code>goto</code> to go to another line of code. Instead, make use of functions and loops!</li><li>Never use <code>stringstream</code> for this course.</li></ul>`,119),o=[p];function t(r,c,i,d,y,D){return n(),a("div",null,o)}const C=s(l,[["render",t]]);export{F as __pageData,C as default};
