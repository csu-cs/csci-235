import{_ as s,o as a,c as e,e as n}from"./app.55bf1006.js";const m=JSON.parse('{"title":"Custom Types","description":"","frontmatter":{},"headers":[{"level":2,"title":"Type Aliasing","slug":"type-aliasing","link":"#type-aliasing","children":[]},{"level":2,"title":"Auto Variable Types","slug":"auto-variable-types","link":"#auto-variable-types","children":[]}],"relativePath":"notes/07-custom-types.md","lastUpdated":1672203699000}'),l={name:"notes/07-custom-types.md"},p=n(`<h1 id="custom-types" tabindex="-1">Custom Types <a class="header-anchor" href="#custom-types" aria-hidden="true">#</a></h1><p><em>Chapter 7</em></p><h2 id="type-aliasing" tabindex="-1">Type Aliasing <a class="header-anchor" href="#type-aliasing" aria-hidden="true">#</a></h2><p>We can create new names for existing types with the keyword <code>using</code> or <code>typedef</code>.</p><ul><li><p>Syntax (two options):</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> existingTypeName newTypeName</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // traditional method</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">newTypeName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">existingTypeName</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // preferred in the new standard</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>An example that creates a new name, <code>Number</code>, for the <code>int</code> type.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Create a new name for the int type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Number MAX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Define a new const int using the new type name</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>These statements do NOT create any new data types. They create only aliases to existing types.</p></li></ul><h2 id="auto-variable-types" tabindex="-1">Auto Variable Types <a class="header-anchor" href="#auto-variable-types" aria-hidden="true">#</a></h2><p>C++11 and beyond allow auto declaration of variables.</p><ul><li><p>Data type does not need to be specified when initializing a variable at declaration.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   // num1 is an int because 15 is an int.</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15.0</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // num2 is a double</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> num3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // num3 is a char</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> num4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> num1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // num4 is an int</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>The <code>auto</code> keyword is a placeholder for a type, but it is not itself a type. The compiler determines the type based on the value it receives.</p></li><li><p>There is no conversion between types, so your code is not only more flexible but more efficient.</p></li><li><p>The variable <strong>must</strong> be initialized at declaration. For example, the following code will not compile.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // compiler error</span></span>
<span class="line"><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul>`,8),t=[p];function o(i,r,c,y,d,u){return a(),e("div",null,t)}const D=s(l,[["render",o]]);export{m as __pageData,D as default};
