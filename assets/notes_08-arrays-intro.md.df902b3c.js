import{_ as n,o as l,c as e,Q as a,k as s}from"./chunks/framework.eb542efc.js";const p="/csci-235/assets/array-declaration.a9af6ed2.svg",o="/csci-235/assets/array-init.65d20ca9.svg",t="/csci-235/assets/array-access.422414c6.svg",f=JSON.parse('{"title":"Introduction to Arrays","description":"","frontmatter":{},"headers":[],"relativePath":"notes/08-arrays-intro.md","filePath":"notes/08-arrays-intro.md","lastUpdated":1672369588000}'),r={name:"notes/08-arrays-intro.md"},c=a('<h1 id="introduction-to-arrays" tabindex="-1">Introduction to Arrays <a class="header-anchor" href="#introduction-to-arrays" aria-label="Permalink to &quot;Introduction to Arrays&quot;">​</a></h1><p><em>Chapter 8</em></p><h2 id="types-of-data-types" tabindex="-1">Types of Data Types <a class="header-anchor" href="#types-of-data-types" aria-label="Permalink to &quot;Types of Data Types&quot;">​</a></h2><ul><li><em>Simple data type</em>: variables of these types can store only one value at a time.</li><li><em>Structured data type</em>: a data type in which each data item is a collection of other data items.</li></ul><h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h3><p>An <em>array</em> is a collection of a fixed number of elements (values), all of the same data type. A <em>one-dimensional array</em> has elements that are arranged in a list form.</p>',6),i=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/Rps7gBoKefU?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),y=a(`<h2 id="array-declaration" tabindex="-1">Array Declaration <a class="header-anchor" href="#array-declaration" aria-label="Permalink to &quot;Array Declaration&quot;">​</a></h2><ul><li><p>The syntax for declaring a one-dimensional array with <code>SIZE</code> elements:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dataType arrayName[SIZE];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dataType arrayName[SIZE];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>where <code>SIZE</code> is any constant expression that evaluates to a positive integer.</p></li><li><p>Here is an example declaration using a constant variable for the size.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Creating an array of 24 doubles</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> NUM_OF_STUDENTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> testScores[NUM_OF_STUDENTS];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Creating an array of 24 doubles</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> NUM_OF_STUDENTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> testScores[NUM_OF_STUDENTS];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>We can create a new array with 8 elements:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> list[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> list[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><figure><img src="`+p+'" alt="The array declared above has 8 consecutive locations in memory, each of which can store an integer value. Because nothing has been stored in the array yet, the initial values are unknown (could be anything)."><figcaption>The array declared above has 8 consecutive locations in memory, each of which can store an integer value. Because nothing has been stored in the array yet, the initial values are unknown (could be anything).</figcaption></figure></li></ul><h2 id="accessing-array-elements" tabindex="-1">Accessing Array elements <a class="header-anchor" href="#accessing-array-elements" aria-label="Permalink to &quot;Accessing Array elements&quot;">​</a></h2><p>Just like with strings, we use the array subscript operator <code>[]</code> to access individual elements of the array.</p><ul><li><p>Here is how to access a single array element, where <code>indexExp</code> is an expression with a non-negative integer value (called the <em>index</em>).</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arrayName[indexExp];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arrayName[indexExp];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>The value of the index is the position of the item in the array.</p></li><li><p>The first element of an array is at index <code>0</code> (we start <code>0</code>, not <code>1</code>)!</p><ul><li>Therefore, what is the last index in an array relative to its length?</li></ul></li><li><p>We can store a value in this array:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">list[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // store 100 in the 5th element of the array</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">list[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // store 100 in the 5th element of the array</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><figure><img src="'+o+`" alt=" is now stored in memory at index 4 of the array named list."><figcaption><code>100</code> is now stored in memory at index 4 of the array named list.</figcaption></figure></li><li><p>We can also access values from the array:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">list[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">list[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">list[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> list[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">list[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">list[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">list[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><figure><img src="`+t+`" alt="Setting and accessing array elements"><figcaption>Setting and accessing array elements</figcaption></figure></li></ul><h2 id="processing-one-dimensional-arrays" tabindex="-1">Processing One-Dimensional Arrays <a class="header-anchor" href="#processing-one-dimensional-arrays" aria-label="Permalink to &quot;Processing One-Dimensional Arrays&quot;">​</a></h2><p>Examples of basic operations to perform on a one-dimensional array include:</p><ul><li>Initializing</li><li>Inputting data</li><li>Outputting data stored in an array</li><li>Finding the largest and/or smallest element</li></ul><p>Each operation requires the ability to step through elements of the array. This is easily accomplished using a loop.</p><ul><li><p>Given the declarations:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> LIST_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> list[LIST_SIZE];</span><span style="color:#6A737D;"> //array of size 100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> LIST_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> list[LIST_SIZE];</span><span style="color:#6A737D;"> //array of size 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Use a <code class="cpp">for</code> loop to access array elements:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> iter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; iter </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> LIST_SIZE; iter</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    cin </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> list[iter];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; iter </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> LIST_SIZE; iter</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> list[iter];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="array-index-out-of-bounds-error" tabindex="-1">Array Index Out of Bounds Error <a class="header-anchor" href="#array-index-out-of-bounds-error" aria-label="Permalink to &quot;Array Index Out of Bounds Error&quot;">​</a></h2><p>The index of an array is <em>in bounds</em> if the index is <code>&gt;= 0</code> and <code>&lt;= (ARRAY_SIZE – 1)</code></p><ul><li>In C++, there is no guard against indices that are out of bounds.</li><li>If you index an array outside of the bounds, a runtime error will occur, or worse, the program will continue to run with unexpected results.</li></ul><h2 id="array-initialization-during-declaration" tabindex="-1">Array Initialization during Declaration <a class="header-anchor" href="#array-initialization-during-declaration" aria-label="Permalink to &quot;Array Initialization during Declaration&quot;">​</a></h2><p>An array can be initialized when it is declared by listing the values inside curly braces. The array size is determined by the number of initial values in the braces.</p><p>Examples:</p><ul><li><p>To declare an array with 5 elements and initializes them:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> sales[] { </span><span style="color:#79B8FF;">12.25</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32.40</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16.90</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">46.84</span><span style="color:#E1E4E8;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> sales[] { </span><span style="color:#005CC5;">12.25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32.40</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16.90</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">46.84</span><span style="color:#24292E;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>An array can also be partially initialized during declaration:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> sales[</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">] {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> sales[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">] {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Declares an array of 10 elements and initializes all of them to zero.</p></li><li><p>To declare a 10-element array and initializes <code>sales[0]</code> to <code>8</code>, <code>sales[1]</code> to <code>5</code>, <code>sales[2]</code> to <code>12</code>:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> sales[</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">] { </span><span style="color:#79B8FF;">8.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12.0</span><span style="color:#E1E4E8;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> sales[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">] { </span><span style="color:#005CC5;">8.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12.0</span><span style="color:#24292E;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>All other elements are initialized to <code>0</code>.</p></li></ul><h2 id="aggregate-operations-cannot-be-performed-on-arrays-in-c" tabindex="-1">Aggregate Operations cannot be performed on Arrays in C++ <a class="header-anchor" href="#aggregate-operations-cannot-be-performed-on-arrays-in-c" aria-label="Permalink to &quot;Aggregate Operations cannot be performed on Arrays in C++&quot;">​</a></h2><p><em>Aggregate operation</em>: any operation that manipulates the entire array as a single unit.</p><p>Most aggregate operations are NOT possible with arrays. For example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> LIST_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> myList[LIST_SIZE] { </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> yourList[LIST_SIZE];</span></span>
<span class="line"><span style="color:#E1E4E8;">yourList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myList;</span><span style="color:#6A737D;"> // error: invalid array assignment</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> LIST_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> myList[LIST_SIZE] { </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> yourList[LIST_SIZE];</span></span>
<span class="line"><span style="color:#24292E;">yourList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myList;</span><span style="color:#6A737D;"> // error: invalid array assignment</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Solution: use a loop.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Traditional for loop</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> LIST_SIZE; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">index)</span></span>
<span class="line"><span style="color:#E1E4E8;">    yourList[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myList[index];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Traditional for loop</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> LIST_SIZE; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">index)</span></span>
<span class="line"><span style="color:#24292E;">    yourList[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myList[index];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="auto-variable-types" tabindex="-1">Auto Variable Types <a class="header-anchor" href="#auto-variable-types" aria-label="Permalink to &quot;Auto Variable Types&quot;">​</a></h3><p>Remember, C++11 allows the auto declaration of variables.</p><ul><li><p>Data type does not need to be specified when initializing a variable at declaration.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // num1 is an int because 15 is an int.</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15.0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // num2 is a double</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // num3 is a char</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num1;</span><span style="color:#6A737D;"> // num4 is an int</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // num1 is an int because 15 is an int.</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15.0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // num2 is a double</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // num3 is a char</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num1;</span><span style="color:#6A737D;"> // num4 is an int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>The <code class="cpp">auto</code> keyword is a placeholder for a type, but it is not itself a type. The compiler determines the type based on the value it receives.</p></li><li><p>There is no conversion between types, so your code is not only more flexible but more efficient.</p></li></ul><h3 id="range-based-for-loops" tabindex="-1">Range-Based For Loops <a class="header-anchor" href="#range-based-for-loops" aria-label="Permalink to &quot;Range-Based For Loops&quot;">​</a></h3><p>We have already used <a href="./07-strings#range-based-loops">range-based for loops with strings</a>. They may also be used with arrays.</p><p>Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> list[] { </span><span style="color:#79B8FF;">45.3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">77.8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">103.9</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">84.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">88.5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">109.6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99.5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">31.8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99.2</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // a double</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Calculate the sum of all the elements in the list array.</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num : list)</span><span style="color:#6A737D;"> // For each num in list</span></span>
<span class="line"><span style="color:#E1E4E8;">    sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> num;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> list[] { </span><span style="color:#005CC5;">45.3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">77.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">103.9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">84.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">88.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">109.6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">31.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99.2</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // a double</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Calculate the sum of all the elements in the list array.</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num : list)</span><span style="color:#6A737D;"> // For each num in list</span></span>
<span class="line"><span style="color:#24292E;">    sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> num;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In the first part of this <code class="cpp">for</code> loop, the variable, <code>num</code>, holds a copy of an element from the array (<code>list</code>) that is the second part. Range-based loops are very clean because you do not need to index the values in the array. However, you are limited to traversing the entire array from beginning to end.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Range-based for loops will only work on arrays that are declared within that function. They will not work on arrays that are passed as function parameters.</p></div><h2 id="arrays-as-parameters-to-functions" tabindex="-1">Arrays as Parameters to Functions <a class="header-anchor" href="#arrays-as-parameters-to-functions" aria-label="Permalink to &quot;Arrays as Parameters to Functions&quot;">​</a></h2><ul><li><p>Array parameters are <em>only</em> passed <em>by reference</em>.</p><ul><li>Do <strong>not</strong> use <code class="cpp">&amp;</code> symbol when declaring an array as a formal parameter.</li></ul></li><li><p>The length of the array is should be omitted from the square brackets. If provided, it is ignored by the compiler. However, if the function needs to know the length of the array, it must be passed as an additional parameter.</p></li><li><p>Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">funcArrayAsParam</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arrayOne</span><span style="color:#E1E4E8;">[], </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arrayTwo</span><span style="color:#E1E4E8;">[], </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">length</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">funcArrayAsParam</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arrayOne</span><span style="color:#24292E;">[], </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arrayTwo</span><span style="color:#24292E;">[], </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">length</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Can prevent a function from changing the actual parameter when passed by reference.</p><ul><li><p>Use <code>const</code> in the declaration of the formal parameter</p></li><li><p>Example:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exampleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">vals</span><span style="color:#E1E4E8;">[], </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exampleFunc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">vals</span><span style="color:#24292E;">[], </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>C++ does not allow functions to return an array. You can get around this limitation using something known as pointers, but that topic will be discussed in a later course.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Important: If an array parameter is not to be modified inside the function, make it a const array parameter.</p></div>`,35),E=s("div",{class:"youtube"},[s("div",null,[s("iframe",{width:"853",height:"480",src:"https://www.youtube-nocookie.com/embed/oHA9jT8qqDE?rel=0",frameborder:"0",allowfullscreen:"allowfullscreen"})])],-1),d=a(`<h2 id="base-address-of-an-array-and-array-in-computer-memory" tabindex="-1">Base Address of an Array and Array in Computer Memory <a class="header-anchor" href="#base-address-of-an-array-and-array-in-computer-memory" aria-label="Permalink to &quot;Base Address of an Array and Array in Computer Memory&quot;">​</a></h2><p>The <em>base address</em> of an array: address (memory location) of the first array element</p><ul><li><p>Give a one-dimensional array named <code>list</code>, its base address is the address of <code>list[0]</code>.</p></li><li><p>When an array is passed as a parameter, the base address of the actual array is passed to the formal parameter.</p></li><li><p>You can view the Base address for the array like this:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> array[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // Declare array with 5 elements</span></span>
<span class="line"><span style="color:#E1E4E8;">cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> array;</span><span style="color:#6A737D;"> // Display the array’s base address (no square brackets)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// The address of the first element matches the array&#39;s base address.</span></span>
<span class="line"><span style="color:#E1E4E8;">cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">array[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> array[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // Declare array with 5 elements</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> array;</span><span style="color:#6A737D;"> // Display the array’s base address (no square brackets)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// The address of the first element matches the array&#39;s base address.</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">array[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>The base address is displayed in hexadecimal notation (for example, <code>0x1234CC00</code>). Hexadecimal is the base-16 numbering system and has sixteen distinct symbols used for each digit, most often the symbols <code>0</code>–<code>9</code> to represent values zero to nine, and <code>A</code>, <code>B</code>, <code>C</code>, <code> D</code>, <code>E</code>, <code>F</code>. Each hexadecimal digit represents four binary digits (bits).</p></li></ul><p>Table: A comparison of the small integers in different bases.</p><table><thead><tr><th style="text-align:right;">Base 2</th><th style="text-align:center;">0</th><th style="text-align:center;">1</th><th style="text-align:center;">10</th><th style="text-align:center;">11</th><th style="text-align:center;">100</th><th style="text-align:center;">101</th><th style="text-align:center;">110</th><th style="text-align:center;">111</th><th style="text-align:center;">1000</th><th style="text-align:center;">1001</th><th style="text-align:center;">1010</th><th style="text-align:center;">1011</th><th style="text-align:center;">1100</th><th style="text-align:center;">1101</th><th style="text-align:center;">1110</th><th style="text-align:center;">1111</th><th style="text-align:center;">10000</th></tr></thead><tbody><tr><td style="text-align:right;">Base 10</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">10</td><td style="text-align:center;">11</td><td style="text-align:center;">12</td><td style="text-align:center;">13</td><td style="text-align:center;">14</td><td style="text-align:center;">15</td><td style="text-align:center;">16</td></tr><tr><td style="text-align:right;">Base 16</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">A</td><td style="text-align:center;">B</td><td style="text-align:center;">C</td><td style="text-align:center;">D</td><td style="text-align:center;">E</td><td style="text-align:center;">F</td><td style="text-align:center;">10</td></tr></tbody></table><h2 id="common-errors-with-arrays" tabindex="-1">Common Errors with Arrays <a class="header-anchor" href="#common-errors-with-arrays" aria-label="Permalink to &quot;Common Errors with Arrays&quot;">​</a></h2><ol><li>Arrays in C++ (and almost all programming languages) are zero-indexed. That means that the first index is zero, not one. The last index is the length minus one. It is easy to have an off-by-one error if you forget this fact.</li><li>Array Index out of Bounds – can’t try to access an index beyond what you have – you get this error.</li><li>Arrays are passed to a function by reference. Don’t forget that any changes to the array will persist after the function call. Use <code class="cpp">const</code> to insure an array is not modified.</li><li>Can’t set one array equal to another with just the equal operator. Use a loop instead.</li><li>A function can’t return an entire array (arrays are passed by reference anyway, so you should be no need to do this).</li></ol><h2 id="the-span-container-for-arrays" tabindex="-1">The span Container for Arrays <a class="header-anchor" href="#the-span-container-for-arrays" aria-label="Permalink to &quot;The span Container for Arrays&quot;">​</a></h2><p>In C++20 (the C++ standard that was released in 2020), a helpful container was added to associate an array with its length/size. Remember, that the array variable just stores the base address of the array, so it doesn&#39;t keep track of how many elements are in the array. As a result, we often need to pass the array size to a function parameter as an additional parameter. For example,</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">numbers</span><span style="color:#E1E4E8;">[], </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">length</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Length: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // display the array length</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> length; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">index)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> numbers[index] </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">numbers</span><span style="color:#24292E;">[], </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Length: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // display the array length</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> length; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">index)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> numbers[index] </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The <a href="https://en.cppreference.com/w/cpp/container/span" target="_blank" rel="noreferrer">span</a> container allows us to connect the array with its size. For example,</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * Demonstration of using span to connect an array with its size.</span></span>
<span class="line"><span style="color:#6A737D;"> * To compile with the C++20 standard, add the following command line argument</span></span>
<span class="line"><span style="color:#6A737D;"> * -std=c++20</span></span>
<span class="line"><span style="color:#6A737D;"> * (Replace -std=c++20 with -std=c++2a in GCC 9 or earlier.)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;span&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// To use this new span container</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Displays the length and values in an array of doubles.</span></span>
<span class="line"><span style="color:#6A737D;"> * The numbers parameter is a constant span for an array of doubles.</span></span>
<span class="line"><span style="color:#6A737D;"> *     Like static_cast, the type goes within the &lt;&gt;. If you change</span></span>
<span class="line"><span style="color:#6A737D;"> *     &lt;double&gt; to &lt;int&gt;, then it will accept an array of integers.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">span</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">numbers</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // Create an example array of length 10.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> LENGTH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> array[LENGTH] { </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10.1</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Display the array using an implicit cast to a span container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(array);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">span</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">numbers</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // Display the array length</span></span>
<span class="line"><span style="color:#E1E4E8;">    cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Length: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> numbers.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Display each number. This rang-based for loop would not work with a</span></span>
<span class="line"><span style="color:#6A737D;">    // traditional array parameter.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> num : numbers)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * Demonstration of using span to connect an array with its size.</span></span>
<span class="line"><span style="color:#6A737D;"> * To compile with the C++20 standard, add the following command line argument</span></span>
<span class="line"><span style="color:#6A737D;"> * -std=c++20</span></span>
<span class="line"><span style="color:#6A737D;"> * (Replace -std=c++20 with -std=c++2a in GCC 9 or earlier.)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;span&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// To use this new span container</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Displays the length and values in an array of doubles.</span></span>
<span class="line"><span style="color:#6A737D;"> * The numbers parameter is a constant span for an array of doubles.</span></span>
<span class="line"><span style="color:#6A737D;"> *     Like static_cast, the type goes within the &lt;&gt;. If you change</span></span>
<span class="line"><span style="color:#6A737D;"> *     &lt;double&gt; to &lt;int&gt;, then it will accept an array of integers.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">span</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">numbers</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // Create an example array of length 10.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> LENGTH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> array[LENGTH] { </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10.1</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Display the array using an implicit cast to a span container.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(array);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">span</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">numbers</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // Display the array length</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Length: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> numbers.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Display each number. This rang-based for loop would not work with a</span></span>
<span class="line"><span style="color:#6A737D;">    // traditional array parameter.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> num : numbers)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div>`,12),u=[c,i,y,E,d];function h(m,b,g,F,A,v){return l(),e("div",null,u)}const D=n(r,[["render",h]]);export{f as __pageData,D as default};
